{"ast":null,"code":"// import CartState from \"../interfaces/CartState\";\nexport const CartReducer = (state, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case 'addItem':\n      console.log(state);\n      return { ...state,\n        products: [...state.products, action.payload],\n        amount: state.amount + 1,\n        total: state.total + parseFloat(action.payload.price)\n      };\n\n    case 'removeItem':\n      return { ...state,\n        products: [...state.products.slice(0, action.payload), ...state.products.slice(action.payload + 1)],\n        amount: state.amount - 1,\n        total: state.total - parseFloat(state.products[action.payload].price)\n      };\n\n    case 'removeAll':\n      return { ...state,\n        products: [],\n        amount: 0,\n        total: 0\n      };\n    // case 'updateAmount':\n    //     return {\n    //         ...state,\n    //         products: {...PROstate.products.map(product => {\n    //             if(product.id === Number( action.payload.id)){\n    //                 state.amount = state.amount + 1;\n    //                 state.total = state.total + parseFloat(product.price);\n    //                 return \n    //             }      \n    //             re}turn product;\n    //         }),    \n    //     }\n\n    default:\n      return state;\n  }\n};\n_c = CartReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartReducer\");","map":{"version":3,"sources":["/home/jero/Documentos/IonicReactApp/cursoreact/src/context/CartReducer.ts"],"names":["CartReducer","state","action","console","log","type","products","payload","amount","total","parseFloat","price","slice"],"mappings":"AAAA;AAeA,OAAO,MAAMA,WAAW,GAAG,CAACC,KAAD,EAAmBC,MAAnB,KAAqD;AAC5EC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAOA,MAAM,CAACG,IAAd;AACK,SAAK,SAAL;AAELF,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACS,aAAO,EACH,GAAGA,KADA;AAEHK,QAAAA,QAAQ,EAAE,CAAC,GAAGL,KAAK,CAACK,QAAV,EAAoBJ,MAAM,CAACK,OAA3B,CAFP;AAGHC,QAAAA,MAAM,EAAEP,KAAK,CAACO,MAAN,GAAe,CAHpB;AAIHC,QAAAA,KAAK,EAAER,KAAK,CAACQ,KAAN,GAAcC,UAAU,CAACR,MAAM,CAACK,OAAP,CAAeI,KAAhB;AAJ5B,OAAP;;AAML,SAAK,YAAL;AACI,aAAO,EACH,GAAGV,KADA;AAEHK,QAAAA,QAAQ,EAAC,CAAC,GAAGL,KAAK,CAACK,QAAN,CAAeM,KAAf,CAAqB,CAArB,EAAuBV,MAAM,CAACK,OAA9B,CAAJ,EAA4C,GAAGN,KAAK,CAACK,QAAN,CAAeM,KAAf,CAAqBV,MAAM,CAACK,OAAP,GAAe,CAApC,CAA/C,CAFN;AAGHC,QAAAA,MAAM,EAAEP,KAAK,CAACO,MAAN,GAAe,CAHpB;AAIHC,QAAAA,KAAK,EAAER,KAAK,CAACQ,KAAN,GAAcC,UAAU,CAACT,KAAK,CAACK,QAAN,CAAeJ,MAAM,CAACK,OAAtB,EAA+BI,KAAhC;AAJ5B,OAAP;;AAMJ,SAAK,WAAL;AACI,aAAO,EACH,GAAGV,KADA;AAEHK,QAAAA,QAAQ,EAAC,EAFN;AAGHE,QAAAA,MAAM,EAAE,CAHL;AAIHC,QAAAA,KAAK,EAAE;AAJJ,OAAP;AAMJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACI,aAAOR,KAAP;AAtCR;AAyCH,CA3CM;KAAMD,W","sourcesContent":["// import CartState from \"../interfaces/CartState\";\nimport CartState from \"../interfaces/CartState\";\nimport Product from \"../interfaces/Product\";\nimport ProductCart from \"../interfaces/ProductCart\";\n\ntype CartAction = \n   | {type:'addItem', payload: Product }\n   | {type:'removeItem', payload: number}\n    | {type:'removeAll', payload: Product}\n    | {type:'updateAmount', payload: {id:string}}\n    | {type:'updateTotal', payload: Product};\n\n\n\n\nexport const CartReducer = (state: CartState, action: CartAction): CartState => {\n    console.log(action)\n    switch(action.type){\n         case 'addItem':\n\n    console.log(state)\n             return {\n                 ...state,\n                 products: [...state.products, action.payload],\n                 amount: state.amount + 1,\n                 total: state.total + parseFloat(action.payload.price)\n             }\n        case 'removeItem':\n            return {\n                ...state,\n                products:[...state.products.slice(0,action.payload), ...state.products.slice(action.payload+1)],\n                amount: state.amount - 1,\n                total: state.total - parseFloat(state.products[action.payload].price)\n            }\n        case 'removeAll':\n            return {\n                ...state,\n                products:[],  \n                amount: 0,\n                total: 0  \n            }\n        // case 'updateAmount':\n        //     return {\n        //         ...state,\n        //         products: {...PROstate.products.map(product => {\n        //             if(product.id === Number( action.payload.id)){\n        //                 state.amount = state.amount + 1;\n        //                 state.total = state.total + parseFloat(product.price);\n        //                 return \n        //             }      \n        //             re}turn product;\n        //         }),    \n        //     }\n\n        default:\n            return state;\n\n    }\n}"]},"metadata":{},"sourceType":"module"}