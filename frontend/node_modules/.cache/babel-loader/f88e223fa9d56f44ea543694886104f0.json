{"ast":null,"code":"// import CartState from \"../interfaces/CartState\";\nconst toProductCart = product => {\n  return { ...product,\n    amount: 1\n  };\n};\n\nexport const CartReducer = (state, action) => {\n  switch (action.type) {\n    case 'addItem':\n      const pay = toProductCart(action.payload);\n      console.log(pay);\n      return { ...state,\n        products: [...state.products, pay],\n        amount: state.amount + 1,\n        total: state.total + parseFloat(pay.price)\n      };\n\n    case 'removeItem':\n      return { ...state,\n        products: [...state.products.slice(0, action.payload), ...state.products.slice(action.payload + 1)],\n        amount: state.amount - 1,\n        total: state.total - parseFloat(state.products[action.payload].price)\n      };\n\n    case 'removeAll':\n      return { ...state,\n        products: [],\n        amount: 0,\n        total: 0\n      };\n\n    case 'updateAmount':\n      return { ...state,\n        products: state.products.map(product => {\n          if (product.id === Number(action.payload.id)) {\n            state.amount = state.amount + 1;\n            state.total = state.total + parseFloat(product.price);\n            return { ...product,\n              amount: product.amount + 1\n            };\n          }\n\n          return product;\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n_c = CartReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartReducer\");","map":{"version":3,"sources":["/home/jero/Documentos/IonicReactApp/cursoreact/src/context/CartReducer.ts"],"names":["toProductCart","product","amount","CartReducer","state","action","type","pay","payload","console","log","products","total","parseFloat","price","slice","map","id","Number"],"mappings":"AAAA;AAYA,MAAMA,aAAa,GAAGC,OAAD,IAAkC;AACnD,SAAO,EACH,GAAGA,OADA;AAEHC,IAAAA,MAAM,EAAE;AAFL,GAAP;AAIH,CALD;;AAQA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAmBC,MAAnB,KAA0C;AACjE,UAAOA,MAAM,CAACC,IAAd;AACK,SAAK,SAAL;AAEI,YAAMC,GAAG,GAACP,aAAa,CAACK,MAAM,CAACG,OAAR,CAAvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,aAAO,EACH,GAAGH,KADA;AAEHO,QAAAA,QAAQ,EAAE,CAAC,GAAGP,KAAK,CAACO,QAAV,EAAoBJ,GAApB,CAFP;AAGHL,QAAAA,MAAM,EAAEE,KAAK,CAACF,MAAN,GAAe,CAHpB;AAIHU,QAAAA,KAAK,EAAER,KAAK,CAACQ,KAAN,GAAcC,UAAU,CAACN,GAAG,CAACO,KAAL;AAJ5B,OAAP;;AAML,SAAK,YAAL;AACI,aAAO,EACH,GAAGV,KADA;AAEHO,QAAAA,QAAQ,EAAC,CAAC,GAAGP,KAAK,CAACO,QAAN,CAAeI,KAAf,CAAqB,CAArB,EAAuBV,MAAM,CAACG,OAA9B,CAAJ,EAA4C,GAAGJ,KAAK,CAACO,QAAN,CAAeI,KAAf,CAAqBV,MAAM,CAACG,OAAP,GAAe,CAApC,CAA/C,CAFN;AAGHN,QAAAA,MAAM,EAAEE,KAAK,CAACF,MAAN,GAAe,CAHpB;AAIHU,QAAAA,KAAK,EAAER,KAAK,CAACQ,KAAN,GAAcC,UAAU,CAACT,KAAK,CAACO,QAAN,CAAeN,MAAM,CAACG,OAAtB,EAA+BM,KAAhC;AAJ5B,OAAP;;AAMJ,SAAK,WAAL;AACI,aAAO,EACH,GAAGV,KADA;AAEHO,QAAAA,QAAQ,EAAC,EAFN;AAGHT,QAAAA,MAAM,EAAE,CAHL;AAIHU,QAAAA,KAAK,EAAE;AAJJ,OAAP;;AAMJ,SAAK,cAAL;AACI,aAAO,EACH,GAAGR,KADA;AAEHO,QAAAA,QAAQ,EAAEP,KAAK,CAACO,QAAN,CAAeK,GAAf,CAAmBf,OAAO,IAAI;AACpC,cAAGA,OAAO,CAACgB,EAAR,KAAeC,MAAM,CAAEb,MAAM,CAACG,OAAP,CAAeS,EAAjB,CAAxB,EAA6C;AACzCb,YAAAA,KAAK,CAACF,MAAN,GAAeE,KAAK,CAACF,MAAN,GAAe,CAA9B;AACAE,YAAAA,KAAK,CAACQ,KAAN,GAAcR,KAAK,CAACQ,KAAN,GAAcC,UAAU,CAACZ,OAAO,CAACa,KAAT,CAAtC;AACA,mBAAO,EACH,GAAGb,OADA;AAEHC,cAAAA,MAAM,EAAED,OAAO,CAACC,MAAR,GAAiB;AAFtB,aAAP;AAIH;;AACD,iBAAOD,OAAP;AACH,SAVS;AAFP,OAAP;;AAeJ;AACI,aAAOG,KAAP;AA1CR;AA6CH,CA9CM;KAAMD,W","sourcesContent":["// import CartState from \"../interfaces/CartState\";\nimport CartState from \"../interfaces/CartState\";\nimport Product from \"../interfaces/Product\";\nimport ProductCart from \"../interfaces/ProductCart\";\n\ntype CartAction = \n   | {type:'addItem', payload: Product}\n   | {type:'removeItem', payload: number}\n    | {type:'removeAll', payload: Product}\n    | {type:'updateAmount', payload: {id:string}}\n    | {type:'updateTotal', payload: ProductCart};\n\nconst toProductCart= (product: Product):ProductCart => {\n    return {\n        ...product,\n        amount: 1,\n    }\n}\n\n\nexport const CartReducer = (state: CartState, action: CartAction) => {\n    switch(action.type){\n         case 'addItem':\n\n             const pay=toProductCart(action.payload);\n             console.log(pay);\n             return {\n                 ...state,\n                 products: [...state.products, pay],\n                 amount: state.amount + 1,\n                 total: state.total + parseFloat(pay.price)\n             }\n        case 'removeItem':\n            return {\n                ...state,\n                products:[...state.products.slice(0,action.payload), ...state.products.slice(action.payload+1)],\n                amount: state.amount - 1,\n                total: state.total - parseFloat(state.products[action.payload].price)\n            }\n        case 'removeAll':\n            return {\n                ...state,\n                products:[],  \n                amount: 0,\n                total: 0  \n            }\n        case 'updateAmount':\n            return {\n                ...state,\n                products: state.products.map(product => {\n                    if(product.id === Number( action.payload.id)){\n                        state.amount = state.amount + 1;\n                        state.total = state.total + parseFloat(product.price);\n                        return {\n                            ...product,\n                            amount: product.amount + 1\n                        }\n                    }\n                    return product;\n                }),    \n            }\n\n        default:\n            return state;\n\n    }\n}"]},"metadata":{},"sourceType":"module"}