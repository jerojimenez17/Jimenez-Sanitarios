{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, Build, h, Host, proxyCustomElement } from '@stencil/core/internal/client';\nimport { b as getIonMode, c as config, a as isPlatform } from './ionic-global.js';\nconst appCss = \"html.plt-mobile ion-app{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}html.plt-mobile ion-app [contenteditable]{-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}ion-app.force-statusbar-padding{--ion-safe-area-top:20px}\";\nlet App = class extends HTMLElement {\n  constructor() {\n    super();\n\n    this.__registerHost();\n  }\n\n  componentDidLoad() {\n    if (Build.isBrowser) {\n      rIC(async () => {\n        const isHybrid = isPlatform(window, 'hybrid');\n\n        if (!config.getBoolean('_testing')) {\n          import('./tap-click.js').then(module => module.startTapClick(config));\n        }\n\n        if (config.getBoolean('statusTap', isHybrid)) {\n          import('./status-tap.js').then(module => module.startStatusTap());\n        }\n\n        if (config.getBoolean('inputShims', needInputShims())) {\n          import('./input-shims.js').then(module => module.startInputShims(config));\n        }\n\n        const hardwareBackButtonModule = await import('./hardware-back-button.js');\n\n        if (config.getBoolean('hardwareBackButton', isHybrid)) {\n          hardwareBackButtonModule.startHardwareBackButton();\n        } else {\n          hardwareBackButtonModule.blockHardwareBackButton();\n        }\n\n        if (typeof window !== 'undefined') {\n          import('./keyboard.js').then(module => module.startKeyboardAssist(window));\n        }\n\n        import('./focus-visible.js').then(module => this.focusVisible = module.startFocusVisible());\n      });\n    }\n  }\n  /**\n   * @internal\n   * Used to set focus on an element that uses `ion-focusable`.\n   * Do not use this if focusing the element as a result of a keyboard\n   * event as the focus utility should handle this for us. This method\n   * should be used when we want to programmatically focus an element as\n   * a result of another user action. (Ex: We focus the first element\n   * inside of a popover when the user presents it, but the popover is not always\n   * presented as a result of keyboard action.)\n   */\n\n\n  async setFocus(elements) {\n    if (this.focusVisible) {\n      this.focusVisible.setFocus(elements);\n    }\n  }\n\n  render() {\n    const mode = getIonMode(this);\n    return h(Host, {\n      class: {\n        [mode]: true,\n        'ion-page': true,\n        'force-statusbar-padding': config.getBoolean('_forceStatusbarPadding')\n      }\n    });\n  }\n\n  get el() {\n    return this;\n  }\n\n  static get style() {\n    return appCss;\n  }\n\n};\n\nconst needInputShims = () => {\n  return isPlatform(window, 'ios') && isPlatform(window, 'mobile');\n};\n\nconst rIC = callback => {\n  if ('requestIdleCallback' in window) {\n    window.requestIdleCallback(callback);\n  } else {\n    setTimeout(callback, 32);\n  }\n};\n\nApp = /*@__PURE__*/proxyCustomElement(App, [0, \"ion-app\", {\n  \"setFocus\": [64]\n}]);\n\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n\n  const components = [\"ion-app\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-app\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, App);\n        }\n\n        break;\n    }\n  });\n}\n\nconst IonApp = App;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonApp, defineCustomElement };","map":{"version":3,"sources":["/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@ionic/core/components/ion-app.js"],"names":["HTMLElement","Build","h","Host","proxyCustomElement","b","getIonMode","c","config","a","isPlatform","appCss","App","constructor","__registerHost","componentDidLoad","isBrowser","rIC","isHybrid","window","getBoolean","then","module","startTapClick","startStatusTap","needInputShims","startInputShims","hardwareBackButtonModule","startHardwareBackButton","blockHardwareBackButton","startKeyboardAssist","focusVisible","startFocusVisible","setFocus","elements","render","mode","class","el","style","callback","requestIdleCallback","setTimeout","defineCustomElement$1","customElements","components","forEach","tagName","get","define","IonApp","defineCustomElement"],"mappings":"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","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, Build, h, Host, proxyCustomElement } from '@stencil/core/internal/client';\nimport { b as getIonMode, c as config, a as isPlatform } from './ionic-global.js';\n\nconst appCss = \"html.plt-mobile ion-app{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}html.plt-mobile ion-app [contenteditable]{-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}ion-app.force-statusbar-padding{--ion-safe-area-top:20px}\";\n\nlet App = class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n  }\n  componentDidLoad() {\n    if (Build.isBrowser) {\n      rIC(async () => {\n        const isHybrid = isPlatform(window, 'hybrid');\n        if (!config.getBoolean('_testing')) {\n          import('./tap-click.js').then(module => module.startTapClick(config));\n        }\n        if (config.getBoolean('statusTap', isHybrid)) {\n          import('./status-tap.js').then(module => module.startStatusTap());\n        }\n        if (config.getBoolean('inputShims', needInputShims())) {\n          import('./input-shims.js').then(module => module.startInputShims(config));\n        }\n        const hardwareBackButtonModule = await import('./hardware-back-button.js');\n        if (config.getBoolean('hardwareBackButton', isHybrid)) {\n          hardwareBackButtonModule.startHardwareBackButton();\n        }\n        else {\n          hardwareBackButtonModule.blockHardwareBackButton();\n        }\n        if (typeof window !== 'undefined') {\n          import('./keyboard.js').then(module => module.startKeyboardAssist(window));\n        }\n        import('./focus-visible.js').then(module => this.focusVisible = module.startFocusVisible());\n      });\n    }\n  }\n  /**\n   * @internal\n   * Used to set focus on an element that uses `ion-focusable`.\n   * Do not use this if focusing the element as a result of a keyboard\n   * event as the focus utility should handle this for us. This method\n   * should be used when we want to programmatically focus an element as\n   * a result of another user action. (Ex: We focus the first element\n   * inside of a popover when the user presents it, but the popover is not always\n   * presented as a result of keyboard action.)\n   */\n  async setFocus(elements) {\n    if (this.focusVisible) {\n      this.focusVisible.setFocus(elements);\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        'ion-page': true,\n        'force-statusbar-padding': config.getBoolean('_forceStatusbarPadding'),\n      } }));\n  }\n  get el() { return this; }\n  static get style() { return appCss; }\n};\nconst needInputShims = () => {\n  return isPlatform(window, 'ios') && isPlatform(window, 'mobile');\n};\nconst rIC = (callback) => {\n  if ('requestIdleCallback' in window) {\n    window.requestIdleCallback(callback);\n  }\n  else {\n    setTimeout(callback, 32);\n  }\n};\nApp = /*@__PURE__*/ proxyCustomElement(App, [0, \"ion-app\", {\n    \"setFocus\": [64]\n  }]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-app\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-app\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, App);\n      }\n      break;\n  } });\n}\n\nconst IonApp = App;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonApp, defineCustomElement };\n"]},"metadata":{},"sourceType":"module"}