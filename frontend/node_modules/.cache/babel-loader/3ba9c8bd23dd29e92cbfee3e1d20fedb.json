{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _assertThisInitialized from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _asyncToGenerator from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/regenerator/index.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, createEvent, h, proxyCustomElement, Build } from '@stencil/core/internal/client';\nimport { b as getIonMode, c as config } from './ionic-global.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier.js';\nimport { n as assert } from './helpers.js';\nimport { l as lifecycle, t as _transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index4.js';\nimport { a as attachComponent } from './framework-delegate.js';\nvar VIEW_STATE_NEW = 1;\nvar VIEW_STATE_ATTACHED = 2;\nvar VIEW_STATE_DESTROYED = 3;\n\nvar ViewController = /*#__PURE__*/function () {\n  function ViewController(component, params) {\n    _classCallCheck(this, ViewController);\n\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n\n  _createClass(ViewController, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(container) {\n        var component;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.state = VIEW_STATE_ATTACHED;\n\n                if (this.element) {\n                  _context.next = 6;\n                  break;\n                }\n\n                component = this.component;\n                _context.next = 5;\n                return attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n\n              case 5:\n                this.element = _context.sent;\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n    /**\n     * DOM WRITE\n     */\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n      var element = this.element;\n\n      if (element) {\n        if (this.delegate) {\n          this.delegate.removeViewFromDom(element.parentElement, element);\n        } else {\n          element.remove();\n        }\n      }\n\n      this.nav = undefined;\n      this.state = VIEW_STATE_DESTROYED;\n    }\n  }]);\n\n  return ViewController;\n}();\n\nvar matches = function matches(view, id, params) {\n  if (!view) {\n    return false;\n  }\n\n  if (view.component !== id) {\n    return false;\n  }\n\n  var currentParams = view.params;\n\n  if (currentParams === params) {\n    return true;\n  }\n\n  if (!currentParams && !params) {\n    return true;\n  }\n\n  if (!currentParams || !params) {\n    return false;\n  }\n\n  var keysA = Object.keys(currentParams);\n  var keysB = Object.keys(params);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (var _i = 0, _keysA = keysA; _i < _keysA.length; _i++) {\n    var key = _keysA[_i];\n\n    if (currentParams[key] !== params[key]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar convertToView = function convertToView(page, params) {\n  if (!page) {\n    return null;\n  }\n\n  if (page instanceof ViewController) {\n    return page;\n  }\n\n  return new ViewController(page, params);\n};\n\nvar convertToViews = function convertToViews(pages) {\n  return pages.map(function (page) {\n    if (page instanceof ViewController) {\n      return page;\n    }\n\n    if ('component' in page) {\n      /**\n       * TODO Ionic 6:\n       * Consider switching to just using `undefined` here\n       * as well as on the public interfaces and on\n       * `NavComponentWithProps`. Previously `pages` was\n       * of type `any[]` so TypeScript did not catch this.\n       */\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n\n    return convertToView(page, undefined);\n  }).filter(function (v) {\n    return v !== null;\n  });\n};\n\nvar navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nvar Nav = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(Nav, _HTMLElement);\n\n  var _super = _createSuper(Nav);\n\n  function Nav() {\n    var _this;\n\n    _classCallCheck(this, Nav);\n\n    _this = _super.call(this);\n\n    _this.__registerHost();\n\n    _this.__attachShadow();\n\n    _this.ionNavWillLoad = createEvent(_assertThisInitialized(_this), \"ionNavWillLoad\", 7);\n    _this.ionNavWillChange = createEvent(_assertThisInitialized(_this), \"ionNavWillChange\", 3);\n    _this.ionNavDidChange = createEvent(_assertThisInitialized(_this), \"ionNavDidChange\", 3);\n    _this.transInstr = [];\n    _this.animationEnabled = true;\n    _this.useRouter = false;\n    _this.isTransitioning = false;\n    _this.destroyed = false;\n    _this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n\n    _this.animated = true;\n    return _this;\n  }\n\n  _createClass(Nav, [{\n    key: \"swipeGestureChanged\",\n    value: function swipeGestureChanged() {\n      if (this.gesture) {\n        this.gesture.enable(this.swipeGesture === true);\n      }\n    }\n  }, {\n    key: \"rootChanged\",\n    value: function rootChanged() {\n      var isDev = Build.isDev;\n\n      if (this.root !== undefined) {\n        if (!this.useRouter) {\n          this.setRoot(this.root, this.rootParams);\n        } else if (isDev) {\n          console.warn('<ion-nav> does not support a root attribute when using ion-router.');\n        }\n      }\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      this.useRouter = !!document.querySelector('ion-router') && !this.el.closest('[no-router]');\n\n      if (this.swipeGesture === undefined) {\n        var mode = getIonMode(this);\n        this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n      }\n\n      this.ionNavWillLoad.emit();\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function () {\n      var _componentDidLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.rootChanged();\n                _context2.next = 3;\n                return import('./swipe-back.js');\n\n              case 3:\n                this.gesture = _context2.sent.createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n                this.swipeGestureChanged();\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidLoad() {\n        return _componentDidLoad.apply(this, arguments);\n      }\n\n      return componentDidLoad;\n    }()\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      var _iterator = _createForOfIteratorHelper(this.views),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var view = _step.value;\n          lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n\n          view._destroy();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (this.gesture) {\n        this.gesture.destroy();\n        this.gesture = undefined;\n      } // release swipe back gesture and transition\n\n\n      this.transInstr.length = this.views.length = 0;\n      this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(component, componentProps, opts, done) {\n      return this.queueTrns({\n        insertStart: -1,\n        insertViews: [{\n          component: component,\n          componentProps: componentProps\n        }],\n        opts: opts\n      }, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(insertIndex, component, componentProps, opts, done) {\n      return this.queueTrns({\n        insertStart: insertIndex,\n        insertViews: [{\n          component: component,\n          componentProps: componentProps\n        }],\n        opts: opts\n      }, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"insertPages\",\n    value: function insertPages(insertIndex, insertComponents, opts, done) {\n      return this.queueTrns({\n        insertStart: insertIndex,\n        insertViews: insertComponents,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"pop\",\n    value: function pop(opts, done) {\n      return this.queueTrns({\n        removeStart: -1,\n        removeCount: 1,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"popTo\",\n    value: function popTo(indexOrViewCtrl, opts, done) {\n      var tiConfig = {\n        removeStart: -1,\n        removeCount: -1,\n        opts: opts\n      };\n\n      if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n        tiConfig.removeView = indexOrViewCtrl;\n        tiConfig.removeStart = 1;\n      } else if (typeof indexOrViewCtrl === 'number') {\n        tiConfig.removeStart = indexOrViewCtrl + 1;\n      }\n\n      return this.queueTrns(tiConfig, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"popToRoot\",\n    value: function popToRoot(opts, done) {\n      return this.queueTrns({\n        removeStart: 1,\n        removeCount: -1,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"removeIndex\",\n    value: function removeIndex(startIndex) {\n      var removeCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var opts = arguments.length > 2 ? arguments[2] : undefined;\n      var done = arguments.length > 3 ? arguments[3] : undefined;\n      return this.queueTrns({\n        removeStart: startIndex,\n        removeCount: removeCount,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"setRoot\",\n    value: function setRoot(component, componentProps, opts, done) {\n      return this.setPages([{\n        component: component,\n        componentProps: componentProps\n      }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"setPages\",\n    value: function setPages(views, opts, done) {\n      if (opts == null) {\n        opts = {};\n      } // if animation wasn't set to true then default it to NOT animate\n\n\n      if (opts.animated !== true) {\n        opts.animated = false;\n      }\n\n      return this.queueTrns({\n        insertStart: 0,\n        insertViews: views,\n        removeStart: 0,\n        removeCount: -1,\n        opts: opts\n      }, done);\n    }\n    /** @internal */\n\n  }, {\n    key: \"setRouteId\",\n    value: function setRouteId(id, params, direction, animation) {\n      var active = this.getActiveSync();\n\n      if (matches(active, id, params)) {\n        return Promise.resolve({\n          changed: false,\n          element: active.element\n        });\n      }\n\n      var resolve;\n      var promise = new Promise(function (r) {\n        return resolve = r;\n      });\n      var finish;\n      var commonOpts = {\n        updateURL: false,\n        viewIsReady: function viewIsReady(enteringEl) {\n          var mark;\n          var p = new Promise(function (r) {\n            return mark = r;\n          });\n          resolve({\n            changed: true,\n            element: enteringEl,\n            markVisible: function () {\n              var _markVisible = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        mark();\n                        _context3.next = 3;\n                        return finish;\n\n                      case 3:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n\n              function markVisible() {\n                return _markVisible.apply(this, arguments);\n              }\n\n              return markVisible;\n            }()\n          });\n          return p;\n        }\n      };\n\n      if (direction === 'root') {\n        finish = this.setRoot(id, params, commonOpts);\n      } else {\n        var viewController = this.views.find(function (v) {\n          return matches(v, id, params);\n        });\n\n        if (viewController) {\n          finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {\n            direction: 'back',\n            animationBuilder: animation\n          }));\n        } else if (direction === 'forward') {\n          finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {\n            animationBuilder: animation\n          }));\n        } else if (direction === 'back') {\n          finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {\n            direction: 'back',\n            animated: true,\n            animationBuilder: animation\n          }));\n        }\n      }\n\n      return promise;\n    }\n    /** @internal */\n\n  }, {\n    key: \"getRouteId\",\n    value: function () {\n      var _getRouteId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var active;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                active = this.getActiveSync();\n                return _context4.abrupt(\"return\", active ? {\n                  id: active.element.tagName,\n                  params: active.params,\n                  element: active.element\n                } : undefined);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getRouteId() {\n        return _getRouteId.apply(this, arguments);\n      }\n\n      return getRouteId;\n    }()\n    /**\n     * Get the active view.\n     */\n\n  }, {\n    key: \"getActive\",\n    value: function getActive() {\n      return Promise.resolve(this.getActiveSync());\n    }\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n\n  }, {\n    key: \"getByIndex\",\n    value: function getByIndex(index) {\n      return Promise.resolve(this.views[index]);\n    }\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n\n  }, {\n    key: \"canGoBack\",\n    value: function canGoBack(view) {\n      return Promise.resolve(this.canGoBackSync(view));\n    }\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n\n  }, {\n    key: \"getPrevious\",\n    value: function getPrevious(view) {\n      return Promise.resolve(this.getPreviousSync(view));\n    }\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.views.length;\n    }\n  }, {\n    key: \"getActiveSync\",\n    value: function getActiveSync() {\n      return this.views[this.views.length - 1];\n    }\n  }, {\n    key: \"canGoBackSync\",\n    value: function canGoBackSync() {\n      var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();\n      return !!(view && this.getPreviousSync(view));\n    }\n  }, {\n    key: \"getPreviousSync\",\n    value: function getPreviousSync() {\n      var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();\n\n      if (!view) {\n        return undefined;\n      }\n\n      var views = this.views;\n      var index = views.indexOf(view);\n      return index > 0 ? views[index - 1] : undefined;\n    } // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n    // 1. _nextTrns(): consumes the next transition in the queue\n    // 2. _viewInit(): initializes enteringView if required\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n    // 4. _postViewInit(): add/remove the views from the navigation stack\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n    // 8. _transitionFinish(): called once the transition finishes\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n\n  }, {\n    key: \"queueTrns\",\n    value: function () {\n      var _queueTrns = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ti, done) {\n        var promise, router, canTransition;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy)) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", Promise.resolve(false));\n\n              case 2:\n                promise = new Promise(function (resolve, reject) {\n                  ti.resolve = resolve;\n                  ti.reject = reject;\n                });\n                ti.done = done;\n                /**\n                 * If using router, check to see if navigation hooks\n                 * will allow us to perform this transition. This\n                 * is required in order for hooks to work with\n                 * the ion-back-button or swipe to go back.\n                 */\n\n                if (!(ti.opts && ti.opts.updateURL !== false && this.useRouter)) {\n                  _context5.next = 17;\n                  break;\n                }\n\n                router = document.querySelector('ion-router');\n\n                if (!router) {\n                  _context5.next = 17;\n                  break;\n                }\n\n                _context5.next = 9;\n                return router.canTransition();\n\n              case 9:\n                canTransition = _context5.sent;\n\n                if (!(canTransition === false)) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", Promise.resolve(false));\n\n              case 14:\n                if (!(typeof canTransition === 'string')) {\n                  _context5.next = 17;\n                  break;\n                }\n\n                router.push(canTransition, ti.opts.direction || 'back');\n                return _context5.abrupt(\"return\", Promise.resolve(false));\n\n              case 17:\n                // Normalize empty\n                if (ti.insertViews && ti.insertViews.length === 0) {\n                  ti.insertViews = undefined;\n                } // Enqueue transition instruction\n\n\n                this.transInstr.push(ti); // if there isn't a transition already happening\n                // then this will kick off this transition\n\n                this.nextTrns();\n                return _context5.abrupt(\"return\", promise);\n\n              case 21:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function queueTrns(_x2, _x3) {\n        return _queueTrns.apply(this, arguments);\n      }\n\n      return queueTrns;\n    }()\n  }, {\n    key: \"success\",\n    value: function success(result, ti) {\n      if (this.destroyed) {\n        this.fireError('nav controller was destroyed', ti);\n        return;\n      }\n\n      if (ti.done) {\n        ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n      }\n\n      ti.resolve(result.hasCompleted);\n\n      if (ti.opts.updateURL !== false && this.useRouter) {\n        var router = document.querySelector('ion-router');\n\n        if (router) {\n          var direction = result.direction === 'back' ? 'back' : 'forward';\n          router.navChanged(direction);\n        }\n      }\n    }\n  }, {\n    key: \"failed\",\n    value: function failed(rejectReason, ti) {\n      if (this.destroyed) {\n        this.fireError('nav controller was destroyed', ti);\n        return;\n      }\n\n      this.transInstr.length = 0;\n      this.fireError(rejectReason, ti);\n    }\n  }, {\n    key: \"fireError\",\n    value: function fireError(rejectReason, ti) {\n      if (ti.done) {\n        ti.done(false, false, rejectReason);\n      }\n\n      if (ti.reject && !this.destroyed) {\n        ti.reject(rejectReason);\n      } else {\n        ti.resolve(false);\n      }\n    }\n  }, {\n    key: \"nextTrns\",\n    value: function nextTrns() {\n      // this is the framework's bread 'n butta function\n      // only one transition is allowed at any given time\n      if (this.isTransitioning) {\n        return false;\n      } // there is no transition happening right now\n      // get the next instruction\n\n\n      var ti = this.transInstr.shift();\n\n      if (!ti) {\n        return false;\n      }\n\n      this.runTransition(ti);\n      return true;\n    }\n  }, {\n    key: \"runTransition\",\n    value: function () {\n      var _runTransition = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(ti) {\n        var leavingView, enteringView, requiresTransition, isBackDirection, result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                // set that this nav is actively transitioning\n                this.ionNavWillChange.emit();\n                this.isTransitioning = true;\n                this.prepareTI(ti);\n                leavingView = this.getActiveSync();\n                enteringView = this.getEnteringView(ti, leavingView);\n\n                if (!(!leavingView && !enteringView)) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                throw new Error('no views in the stack to be removed');\n\n              case 8:\n                if (!(enteringView && enteringView.state === VIEW_STATE_NEW)) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                _context6.next = 11;\n                return enteringView.init(this.el);\n\n              case 11:\n                this.postViewInit(enteringView, leavingView, ti); // Needs transition?\n\n                requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n\n                if (requiresTransition && ti.opts && leavingView) {\n                  isBackDirection = ti.opts.direction === 'back';\n                  /**\n                   * If heading back, use the entering page's animation\n                   * unless otherwise specified by the developer.\n                   */\n\n                  if (isBackDirection) {\n                    ti.opts.animationBuilder = ti.opts.animationBuilder || enteringView && enteringView.animationBuilder;\n                  }\n\n                  leavingView.animationBuilder = ti.opts.animationBuilder;\n                }\n\n                if (!requiresTransition) {\n                  _context6.next = 20;\n                  break;\n                }\n\n                _context6.next = 17;\n                return this.transition(enteringView, leavingView, ti);\n\n              case 17:\n                _context6.t0 = _context6.sent;\n                _context6.next = 21;\n                break;\n\n              case 20:\n                _context6.t0 = {\n                  // transition is not required, so we are already done!\n                  // they're inserting/removing the views somewhere in the middle or\n                  // beginning, so visually nothing needs to animate/transition\n                  // resolve immediately because there's no animation that's happening\n                  hasCompleted: true,\n                  requiresTransition: false\n                };\n\n              case 21:\n                result = _context6.t0;\n                this.success(result, ti);\n                this.ionNavDidChange.emit();\n                _context6.next = 29;\n                break;\n\n              case 26:\n                _context6.prev = 26;\n                _context6.t1 = _context6[\"catch\"](0);\n                this.failed(_context6.t1, ti);\n\n              case 29:\n                this.isTransitioning = false;\n                this.nextTrns();\n\n              case 31:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 26]]);\n      }));\n\n      function runTransition(_x4) {\n        return _runTransition.apply(this, arguments);\n      }\n\n      return runTransition;\n    }()\n  }, {\n    key: \"prepareTI\",\n    value: function prepareTI(ti) {\n      var viewsLength = this.views.length;\n      ti.opts = ti.opts || {};\n\n      if (ti.opts.delegate === undefined) {\n        ti.opts.delegate = this.delegate;\n      }\n\n      if (ti.removeView !== undefined) {\n        assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n        assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n        var index = this.views.indexOf(ti.removeView);\n\n        if (index < 0) {\n          throw new Error('removeView was not found');\n        }\n\n        ti.removeStart += index;\n      }\n\n      if (ti.removeStart !== undefined) {\n        if (ti.removeStart < 0) {\n          ti.removeStart = viewsLength - 1;\n        }\n\n        if (ti.removeCount < 0) {\n          ti.removeCount = viewsLength - ti.removeStart;\n        }\n\n        ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n      }\n\n      if (ti.insertViews) {\n        // allow -1 to be passed in to auto push it on the end\n        // and clean up the index if it's larger then the size of the stack\n        if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n          ti.insertStart = viewsLength;\n        }\n\n        ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n      }\n\n      var insertViews = ti.insertViews;\n\n      if (!insertViews) {\n        return;\n      }\n\n      assert(insertViews.length > 0, 'length can not be zero');\n      var viewControllers = convertToViews(insertViews);\n\n      if (viewControllers.length === 0) {\n        throw new Error('invalid views to insert');\n      } // Check all the inserted view are correct\n\n\n      var _iterator2 = _createForOfIteratorHelper(viewControllers),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var view = _step2.value;\n          view.delegate = ti.opts.delegate;\n          var nav = view.nav;\n\n          if (nav && nav !== this) {\n            throw new Error('inserted view was already inserted');\n          }\n\n          if (view.state === VIEW_STATE_DESTROYED) {\n            throw new Error('inserted view was already destroyed');\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      ti.insertViews = viewControllers;\n    }\n  }, {\n    key: \"getEnteringView\",\n    value: function getEnteringView(ti, leavingView) {\n      var insertViews = ti.insertViews;\n\n      if (insertViews !== undefined) {\n        // grab the very last view of the views to be inserted\n        // and initialize it as the new entering view\n        return insertViews[insertViews.length - 1];\n      }\n\n      var removeStart = ti.removeStart;\n\n      if (removeStart !== undefined) {\n        var views = this.views;\n        var removeEnd = removeStart + ti.removeCount;\n\n        for (var i = views.length - 1; i >= 0; i--) {\n          var view = views[i];\n\n          if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n            return view;\n          }\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"postViewInit\",\n    value: function postViewInit(enteringView, leavingView, ti) {\n      assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n      assert(ti.resolve, 'resolve must be valid');\n      assert(ti.reject, 'reject must be valid');\n      var opts = ti.opts;\n      var insertViews = ti.insertViews;\n      var removeStart = ti.removeStart;\n      var removeCount = ti.removeCount;\n      var destroyQueue; // there are views to remove\n\n      if (removeStart !== undefined && removeCount !== undefined) {\n        assert(removeStart >= 0, 'removeStart can not be negative');\n        assert(removeCount >= 0, 'removeCount can not be negative');\n        destroyQueue = [];\n\n        for (var i = 0; i < removeCount; i++) {\n          var view = this.views[i + removeStart];\n\n          if (view && view !== enteringView && view !== leavingView) {\n            destroyQueue.push(view);\n          }\n        } // default the direction to \"back\"\n\n\n        opts.direction = opts.direction || 'back';\n      }\n\n      var finalBalance = this.views.length + (insertViews !== undefined ? insertViews.length : 0) - (removeCount !== undefined ? removeCount : 0);\n      assert(finalBalance >= 0, 'final balance can not be negative');\n\n      if (finalBalance === 0) {\n        console.warn(\"You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.\", this, this.el);\n        throw new Error('navigation stack needs at least one root page');\n      } // At this point the transition can not be rejected, any throw should be an error\n      // there are views to insert\n\n\n      if (insertViews) {\n        // add the views to the\n        var insertIndex = ti.insertStart;\n\n        var _iterator3 = _createForOfIteratorHelper(insertViews),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _view = _step3.value;\n            this.insertViewAt(_view, insertIndex);\n            insertIndex++;\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        if (ti.enteringRequiresTransition) {\n          // default to forward if not already set\n          opts.direction = opts.direction || 'forward';\n        }\n      } // if the views to be removed are in the beginning or middle\n      // and there is not a view that needs to visually transition out\n      // then just destroy them and don't transition anything\n      // batch all of lifecycles together\n      // let's make sure, callbacks are zoned\n\n\n      if (destroyQueue && destroyQueue.length > 0) {\n        var _iterator4 = _createForOfIteratorHelper(destroyQueue),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var _view2 = _step4.value;\n            lifecycle(_view2.element, LIFECYCLE_WILL_LEAVE);\n            lifecycle(_view2.element, LIFECYCLE_DID_LEAVE);\n            lifecycle(_view2.element, LIFECYCLE_WILL_UNLOAD);\n          } // once all lifecycle events has been delivered, we can safely detroy the views\n\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        var _iterator5 = _createForOfIteratorHelper(destroyQueue),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _view3 = _step5.value;\n            this.destroyView(_view3);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n  }, {\n    key: \"transition\",\n    value: function () {\n      var _transition2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(enteringView, leavingView, ti) {\n        var _this2 = this;\n\n        var opts, progressCallback, mode, enteringEl, leavingEl, animationOpts, _yield$_transition, hasCompleted;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                // we should animate (duration > 0) if the pushed page is not the first one (startup)\n                // or if it is a portal (modal, actionsheet, etc.)\n                opts = ti.opts;\n                progressCallback = opts.progressAnimation ? function (ani) {\n                  return _this2.sbAni = ani;\n                } : undefined;\n                mode = getIonMode(this);\n                enteringEl = enteringView.element;\n                leavingEl = leavingView && leavingView.element;\n                animationOpts = Object.assign(Object.assign({\n                  mode: mode,\n                  showGoBack: this.canGoBackSync(enteringView),\n                  baseEl: this.el,\n                  progressCallback: progressCallback,\n                  animated: this.animated && config.getBoolean('animated', true),\n                  enteringEl: enteringEl,\n                  leavingEl: leavingEl\n                }, opts), {\n                  animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation')\n                });\n                _context7.next = 8;\n                return _transition(animationOpts);\n\n              case 8:\n                _yield$_transition = _context7.sent;\n                hasCompleted = _yield$_transition.hasCompleted;\n                return _context7.abrupt(\"return\", this.transitionFinish(hasCompleted, enteringView, leavingView, opts));\n\n              case 11:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function transition(_x5, _x6, _x7) {\n        return _transition2.apply(this, arguments);\n      }\n\n      return transition;\n    }()\n  }, {\n    key: \"transitionFinish\",\n    value: function transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n      var cleanupView = hasCompleted ? enteringView : leavingView;\n\n      if (cleanupView) {\n        this.cleanup(cleanupView);\n      }\n\n      return {\n        hasCompleted: hasCompleted,\n        requiresTransition: true,\n        enteringView: enteringView,\n        leavingView: leavingView,\n        direction: opts.direction\n      };\n    }\n  }, {\n    key: \"insertViewAt\",\n    value: function insertViewAt(view, index) {\n      var views = this.views;\n      var existingIndex = views.indexOf(view);\n\n      if (existingIndex > -1) {\n        // this view is already in the stack!!\n        // move it to its new location\n        assert(view.nav === this, 'view is not part of the nav');\n        views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n      } else {\n        assert(!view.nav, 'nav is used'); // this is a new view to add to the stack\n        // create the new entering view\n\n        view.nav = this; // insert the entering view into the correct index in the stack\n\n        views.splice(index, 0, view);\n      }\n    }\n  }, {\n    key: \"removeView\",\n    value: function removeView(view) {\n      assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n      var views = this.views;\n      var index = views.indexOf(view);\n      assert(index > -1, 'view must be part of the stack');\n\n      if (index >= 0) {\n        views.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"destroyView\",\n    value: function destroyView(view) {\n      view._destroy();\n\n      this.removeView(view);\n    }\n    /**\n     * DOM WRITE\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup(activeView) {\n      // ok, cleanup time!! Destroy all of the views that are\n      // INACTIVE and come after the active view\n      // only do this if the views exist, though\n      if (this.destroyed) {\n        return;\n      }\n\n      var views = this.views;\n      var activeViewIndex = views.indexOf(activeView);\n\n      for (var i = views.length - 1; i >= 0; i--) {\n        var view = views[i];\n        /**\n         * When inserting multiple views via insertPages\n         * the last page will be transitioned to, but the\n         * others will not be. As a result, a DOM element\n         * will only be created for the last page inserted.\n         * As a result, it is possible to have views in the\n         * stack that do not have `view.element` yet.\n         */\n\n        var element = view.element;\n\n        if (element) {\n          if (i > activeViewIndex) {\n            // this view comes after the active view\n            // let's unload it\n            lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n            this.destroyView(view);\n          } else if (i < activeViewIndex) {\n            // this view comes before the active view\n            // and it is not a portal then ensure it is hidden\n            setPageHidden(element, true);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"canStart\",\n    value: function canStart() {\n      return !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.animationEnabled && this.canGoBackSync();\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart() {\n      this.queueTrns({\n        removeStart: -1,\n        removeCount: 1,\n        opts: {\n          direction: 'back',\n          progressAnimation: true\n        }\n      }, undefined);\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(stepValue) {\n      if (this.sbAni) {\n        this.sbAni.progressStep(stepValue);\n      }\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(shouldComplete, stepValue, dur) {\n      var _this3 = this;\n\n      if (this.sbAni) {\n        this.animationEnabled = false;\n        this.sbAni.onFinish(function () {\n          _this3.animationEnabled = true;\n        }, {\n          oneTimeCallback: true\n        }); // Account for rounding errors in JS\n\n        var newStepValue = shouldComplete ? -0.001 : 0.001;\n        /**\n         * Animation will be reversed here, so need to\n         * reverse the easing curve as well\n         *\n         * Additionally, we need to account for the time relative\n         * to the new easing curve, as `stepValue` is going to be given\n         * in terms of a linear curve.\n         */\n\n        if (!shouldComplete) {\n          this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n          newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n        } else {\n          newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n        }\n\n        this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return h(\"slot\", null);\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return this;\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n      };\n    }\n  }, {\n    key: \"style\",\n    get: function get() {\n      return navCss;\n    }\n  }]);\n\n  return Nav;\n}(HTMLElement);\n\nNav = /*@__PURE__*/proxyCustomElement(Nav, [1, \"ion-nav\", {\n  \"delegate\": [16],\n  \"swipeGesture\": [1028, \"swipe-gesture\"],\n  \"animated\": [4],\n  \"animation\": [16],\n  \"rootParams\": [16],\n  \"root\": [1],\n  \"push\": [64],\n  \"insert\": [64],\n  \"insertPages\": [64],\n  \"pop\": [64],\n  \"popTo\": [64],\n  \"popToRoot\": [64],\n  \"removeIndex\": [64],\n  \"setRoot\": [64],\n  \"setPages\": [64],\n  \"setRouteId\": [64],\n  \"getRouteId\": [64],\n  \"getActive\": [64],\n  \"getByIndex\": [64],\n  \"canGoBack\": [64],\n  \"getPrevious\": [64]\n}]);\n\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n\n  var components = [\"ion-nav\"];\n  components.forEach(function (tagName) {\n    switch (tagName) {\n      case \"ion-nav\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Nav);\n        }\n\n        break;\n    }\n  });\n}\n\nvar IonNav = Nav;\nvar defineCustomElement = defineCustomElement$1;\nexport { IonNav, defineCustomElement };","map":{"version":3,"sources":["/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@ionic/core/components/ion-nav.js"],"names":["HTMLElement","createEvent","h","proxyCustomElement","Build","b","getIonMode","c","config","g","getTimeGivenProgression","n","assert","l","lifecycle","t","transition","s","setPageHidden","d","LIFECYCLE_WILL_UNLOAD","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","a","attachComponent","VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","component","params","state","container","element","delegate","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","currentParams","keysA","Object","keys","keysB","length","key","convertToView","page","convertToViews","pages","map","componentProps","filter","v","navCss","Nav","__registerHost","__attachShadow","ionNavWillLoad","ionNavWillChange","ionNavDidChange","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","gesture","enable","swipeGesture","isDev","root","setRoot","rootParams","console","warn","document","querySelector","el","closest","mode","getBoolean","emit","rootChanged","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","swipeGestureChanged","_destroy","destroy","opts","done","queueTrns","insertStart","insertViews","insertIndex","insertComponents","removeStart","removeCount","indexOrViewCtrl","tiConfig","removeView","startIndex","setPages","direction","animation","active","getActiveSync","Promise","resolve","changed","promise","r","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","viewController","find","popTo","assign","animationBuilder","push","tagName","index","canGoBackSync","getPreviousSync","indexOf","ti","skipIfBusy","reject","router","canTransition","nextTrns","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","init","postViewInit","enteringRequiresTransition","leavingRequiresTransition","isBackDirection","success","failed","viewsLength","viewControllers","removeEnd","i","destroyQueue","finalBalance","insertViewAt","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","get","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","easing","progressEnd","defineCustomElement$1","customElements","components","forEach","define","IonNav","defineCustomElement"],"mappings":"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","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, createEvent, h, proxyCustomElement, Build } from '@stencil/core/internal/client';\nimport { b as getIonMode, c as config } from './ionic-global.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier.js';\nimport { n as assert } from './helpers.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index4.js';\nimport { a as attachComponent } from './framework-delegate.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      }\n      else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  const currentParams = view.params;\n  if (currentParams === params) {\n    return true;\n  }\n  if (!currentParams && !params) {\n    return true;\n  }\n  if (!currentParams || !params) {\n    return false;\n  }\n  const keysA = Object.keys(currentParams);\n  const keysB = Object.keys(params);\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  // Test for A's keys different from B.\n  for (const key of keysA) {\n    if (currentParams[key] !== params[key]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n  return pages.map(page => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      /**\n       * TODO Ionic 6:\n       * Consider switching to just using `undefined` here\n       * as well as on the public interfaces and on\n       * `NavComponentWithProps`. Previously `pages` was\n       * of type `any[]` so TypeScript did not catch this.\n       */\n      return convertToView(page.component, (page.componentProps === null) ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nlet Nav = class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n    this.animated = true;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    const isDev = Build.isDev;\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n      else if (isDev) {\n        console.warn('<ion-nav> does not support a root attribute when using ion-router.');\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter =\n      !!document.querySelector('ion-router') &&\n        !this.el.closest('[no-router]');\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    // release swipe back gesture and transition\n    this.transInstr.length = this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: -1,\n      insertViews: [{ component, componentProps }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: [{ component, componentProps }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts\n    }, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const tiConfig = {\n      removeStart: -1,\n      removeCount: -1,\n      opts\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      tiConfig.removeView = indexOrViewCtrl;\n      tiConfig.removeStart = 1;\n    }\n    else if (typeof indexOrViewCtrl === 'number') {\n      tiConfig.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(tiConfig, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.queueTrns({\n      removeStart: 1,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{ component, componentProps }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    if (opts == null) {\n      opts = {};\n    }\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /** @internal */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element\n      });\n    }\n    let resolve;\n    const promise = new Promise(r => (resolve = r));\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: enteringEl => {\n        let mark;\n        const p = new Promise(r => (mark = r));\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          }\n        });\n        return p;\n      }\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    }\n    else {\n      const viewController = this.views.find(v => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n      }\n      else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n      }\n      else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n      }\n    }\n    return promise;\n  }\n  /** @internal */\n  async getRouteId() {\n    const active = this.getActiveSync();\n    return active\n      ? {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element\n      }\n      : undefined;\n  }\n  /**\n   * Get the active view.\n   */\n  getActive() {\n    return Promise.resolve(this.getActiveSync());\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  getByIndex(index) {\n    return Promise.resolve(this.views[index]);\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  canGoBack(view) {\n    return Promise.resolve(this.canGoBackSync(view));\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  getPrevious(view) {\n    return Promise.resolve(this.getPreviousSync(view));\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n  // 1. _nextTrns(): consumes the next transition in the queue\n  // 2. _viewInit(): initializes enteringView if required\n  // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n  // 4. _postViewInit(): add/remove the views from the navigation stack\n  // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n  // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n  // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n  // 8. _transitionFinish(): called once the transition finishes\n  // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n  async queueTrns(ti, done) {\n    if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n      return Promise.resolve(false);\n    }\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\n     * If using router, check to see if navigation hooks\n     * will allow us to perform this transition. This\n     * is required in order for hooks to work with\n     * the ion-back-button or swipe to go back.\n     */\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const canTransition = await router.canTransition();\n        if (canTransition === false) {\n          return Promise.resolve(false);\n        }\n        else if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return Promise.resolve(false);\n        }\n      }\n    }\n    // Normalize empty\n    if (ti.insertViews && ti.insertViews.length === 0) {\n      ti.insertViews = undefined;\n    }\n    // Enqueue transition instruction\n    this.transInstr.push(ti);\n    // if there isn't a transition already happening\n    // then this will kick off this transition\n    this.nextTrns();\n    return promise;\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    }\n    else {\n      ti.resolve(false);\n    }\n  }\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now\n    // get the next instruction\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n      this.postViewInit(enteringView, leavingView, ti);\n      // Needs transition?\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n        enteringView !== leavingView;\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\n         * If heading back, use the entering page's animation\n         * unless otherwise specified by the developer.\n         */\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView && enteringView.animationBuilder);\n        }\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n      const result = requiresTransition\n        ? await this.transition(enteringView, leavingView, ti)\n        : {\n          // transition is not required, so we are already done!\n          // they're inserting/removing the views somewhere in the middle or\n          // beginning, so visually nothing needs to animate/transition\n          // resolve immediately because there's no animation that's happening\n          hasCompleted: true,\n          requiresTransition: false\n        };\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    }\n    catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n  prepareTI(ti) {\n    const viewsLength = this.views.length;\n    ti.opts = ti.opts || {};\n    if (ti.opts.delegate === undefined) {\n      ti.opts.delegate = this.delegate;\n    }\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition =\n        ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  getEnteringView(ti, leavingView) {\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      // grab the very last view of the views to be inserted\n      // and initialize it as the new entering view\n      return insertViews[insertViews.length - 1];\n    }\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  postViewInit(enteringView, leavingView, ti) {\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    const opts = ti.opts;\n    const insertViews = ti.insertViews;\n    const removeStart = ti.removeStart;\n    const removeCount = ti.removeCount;\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = 0; i < removeCount; i++) {\n        const view = this.views[i + removeStart];\n        if (view && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      opts.direction = opts.direction || 'back';\n    }\n    const finalBalance = this.views.length +\n      (insertViews !== undefined ? insertViews.length : 0) -\n      (removeCount !== undefined ? removeCount : 0);\n    assert(finalBalance >= 0, 'final balance can not be negative');\n    if (finalBalance === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // there are views to insert\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        opts.direction = opts.direction || 'forward';\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation\n      ? (ani) => this.sbAni = ani\n      : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign(Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n      leavingEl }, opts), { animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation') });\n    const { hasCompleted } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    const cleanupView = hasCompleted ? enteringView : leavingView;\n    if (cleanupView) {\n      this.cleanup(cleanupView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction\n    };\n  }\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      // this view is already in the stack!!\n      // move it to its new location\n      assert(view.nav === this, 'view is not part of the nav');\n      views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n    }\n    else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      // insert the entering view into the correct index in the stack\n      views.splice(index, 0, view);\n    }\n  }\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * DOM WRITE\n   */\n  cleanup(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        }\n        else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return (!!this.swipeGesture &&\n      !this.isTransitioning &&\n      this.transInstr.length === 0 &&\n      this.animationEnabled &&\n      this.canGoBackSync());\n  }\n  onStart() {\n    this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts: {\n        direction: 'back',\n        progressAnimation: true\n      }\n    }, undefined);\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, { oneTimeCallback: true });\n      // Account for rounding errors in JS\n      let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      }\n      else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return (h(\"slot\", null));\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"root\": [\"rootChanged\"]\n  }; }\n  static get style() { return navCss; }\n};\nNav = /*@__PURE__*/ proxyCustomElement(Nav, [1, \"ion-nav\", {\n    \"delegate\": [16],\n    \"swipeGesture\": [1028, \"swipe-gesture\"],\n    \"animated\": [4],\n    \"animation\": [16],\n    \"rootParams\": [16],\n    \"root\": [1],\n    \"push\": [64],\n    \"insert\": [64],\n    \"insertPages\": [64],\n    \"pop\": [64],\n    \"popTo\": [64],\n    \"popToRoot\": [64],\n    \"removeIndex\": [64],\n    \"setRoot\": [64],\n    \"setPages\": [64],\n    \"setRouteId\": [64],\n    \"getRouteId\": [64],\n    \"getActive\": [64],\n    \"getByIndex\": [64],\n    \"canGoBack\": [64],\n    \"getPrevious\": [64]\n  }]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-nav\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-nav\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Nav);\n      }\n      break;\n  } });\n}\n\nconst IonNav = Nav;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonNav, defineCustomElement };\n"]},"metadata":{},"sourceType":"module"}