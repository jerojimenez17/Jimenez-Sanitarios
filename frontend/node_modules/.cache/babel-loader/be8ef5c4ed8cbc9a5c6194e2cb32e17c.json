{"ast":null,"code":"import _defineProperty from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _asyncToGenerator from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/regenerator/index.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, h, Host, proxyCustomElement } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { m as menuController } from './index5.js';\nimport { u as updateVisibility } from './menu-toggle-util.js';\nvar menuToggleCss = \":host(.menu-toggle-hidden){display:none}\";\n\nvar MenuToggle = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(MenuToggle, _HTMLElement);\n\n  var _super = _createSuper(MenuToggle);\n\n  function MenuToggle() {\n    var _this;\n\n    _classCallCheck(this, MenuToggle);\n\n    _this = _super.call(this);\n\n    _this.__registerHost();\n\n    _this.__attachShadow();\n\n    _this.visible = false;\n    /**\n     * Automatically hides the content when the corresponding menu is not active.\n     *\n     * By default, it's `true`. Change it to `false` in order to\n     * keep `ion-menu-toggle` always visible regardless the state of the menu.\n     */\n\n    _this.autoHide = true;\n\n    _this.onClick = function () {\n      return menuController.toggle(_this.menu);\n    };\n\n    return _this;\n  }\n\n  _createClass(MenuToggle, [{\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.visibilityChanged();\n    }\n  }, {\n    key: \"visibilityChanged\",\n    value: function () {\n      var _visibilityChanged = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return updateVisibility(this.menu);\n\n              case 2:\n                this.visible = _context.sent;\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function visibilityChanged() {\n        return _visibilityChanged.apply(this, arguments);\n      }\n\n      return visibilityChanged;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _class;\n\n      var mode = getIonMode(this);\n      var hidden = this.autoHide && !this.visible;\n      return h(Host, {\n        onClick: this.onClick,\n        \"aria-hidden\": hidden ? 'true' : null,\n        class: (_class = {}, _defineProperty(_class, mode, true), _defineProperty(_class, 'menu-toggle-hidden', hidden), _class)\n      }, h(\"slot\", null));\n    }\n  }], [{\n    key: \"style\",\n    get: function get() {\n      return menuToggleCss;\n    }\n  }]);\n\n  return MenuToggle;\n}(HTMLElement);\n\nMenuToggle = /*@__PURE__*/proxyCustomElement(MenuToggle, [1, \"ion-menu-toggle\", {\n  \"menu\": [1],\n  \"autoHide\": [4, \"auto-hide\"],\n  \"visible\": [32]\n}, [[16, \"ionMenuChange\", \"visibilityChanged\"], [16, \"ionSplitPaneVisible\", \"visibilityChanged\"]]]);\n\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n\n  var components = [\"ion-menu-toggle\"];\n  components.forEach(function (tagName) {\n    switch (tagName) {\n      case \"ion-menu-toggle\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, MenuToggle);\n        }\n\n        break;\n    }\n  });\n}\n\nvar IonMenuToggle = MenuToggle;\nvar defineCustomElement = defineCustomElement$1;\nexport { IonMenuToggle, defineCustomElement };","map":{"version":3,"sources":["/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@ionic/core/components/ion-menu-toggle.js"],"names":["HTMLElement","h","Host","proxyCustomElement","b","getIonMode","m","menuController","u","updateVisibility","menuToggleCss","MenuToggle","__registerHost","__attachShadow","visible","autoHide","onClick","toggle","menu","visibilityChanged","mode","hidden","class","defineCustomElement$1","customElements","components","forEach","tagName","get","define","IonMenuToggle","defineCustomElement"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA,SAASA,WAAT,EAAsBC,CAAtB,EAAyBC,IAAzB,EAA+BC,kBAA/B,QAAyD,+BAAzD;AACA,SAASC,CAAC,IAAIC,UAAd,QAAgC,mBAAhC;AACA,SAASC,CAAC,IAAIC,cAAd,QAAoC,aAApC;AACA,SAASC,CAAC,IAAIC,gBAAd,QAAsC,uBAAtC;AAEA,IAAMC,aAAa,GAAG,0CAAtB;;AAEA,IAAIC,UAAU;AAAA;;AAAA;;AACZ,wBAAc;AAAA;;AAAA;;AACZ;;AACA,UAAKC,cAAL;;AACA,UAAKC,cAAL;;AACA,UAAKC,OAAL,GAAe,KAAf;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,UAAKC,QAAL,GAAgB,IAAhB;;AACA,UAAKC,OAAL,GAAe,YAAM;AACnB,aAAOT,cAAc,CAACU,MAAf,CAAsB,MAAKC,IAA3B,CAAP;AACD,KAFD;;AAZY;AAeb;;AAhBW;AAAA;AAAA,WAiBZ,6BAAoB;AAClB,WAAKC,iBAAL;AACD;AAnBW;AAAA;AAAA;AAAA,wFAoBZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACuBV,gBAAgB,CAAC,KAAKS,IAAN,CADvC;;AAAA;AACE,qBAAKJ,OADP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OApBY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WAuBZ,kBAAS;AAAA;;AACP,UAAMM,IAAI,GAAGf,UAAU,CAAC,IAAD,CAAvB;AACA,UAAMgB,MAAM,GAAG,KAAKN,QAAL,IAAiB,CAAC,KAAKD,OAAtC;AACA,aAAQb,CAAC,CAACC,IAAD,EAAO;AAAEc,QAAAA,OAAO,EAAE,KAAKA,OAAhB;AAAyB,uBAAeK,MAAM,GAAG,MAAH,GAAY,IAA1D;AAAgEC,QAAAA,KAAK,wCAChFF,IADgF,EACzE,IADyE,2BAEjF,oBAFiF,EAE3DC,MAF2D;AAArE,OAAP,EAGFpB,CAAC,CAAC,MAAD,EAAS,IAAT,CAHC,CAAT;AAID;AA9BW;AAAA;AAAA,SA+BZ,eAAmB;AAAE,aAAOS,aAAP;AAAuB;AA/BhC;;AAAA;AAAA,EAAiBV,WAAjB,CAAd;;AAiCAW,UAAU,GAAG,aAAcR,kBAAkB,CAACQ,UAAD,EAAa,CAAC,CAAD,EAAI,iBAAJ,EAAuB;AAC7E,UAAQ,CAAC,CAAD,CADqE;AAE7E,cAAY,CAAC,CAAD,EAAI,WAAJ,CAFiE;AAG7E,aAAW,CAAC,EAAD;AAHkE,CAAvB,EAIrD,CAAC,CAAC,EAAD,EAAK,eAAL,EAAsB,mBAAtB,CAAD,EAA6C,CAAC,EAAD,EAAK,qBAAL,EAA4B,mBAA5B,CAA7C,CAJqD,CAAb,CAA7C;;AAKA,SAASY,qBAAT,GAAiC;AAC/B,MAAI,OAAOC,cAAP,KAA0B,WAA9B,EAA2C;AACzC;AACD;;AACD,MAAMC,UAAU,GAAG,CAAC,iBAAD,CAAnB;AACAA,EAAAA,UAAU,CAACC,OAAX,CAAmB,UAAAC,OAAO,EAAI;AAAE,YAAQA,OAAR;AAC9B,WAAK,iBAAL;AACE,YAAI,CAACH,cAAc,CAACI,GAAf,CAAmBD,OAAnB,CAAL,EAAkC;AAChCH,UAAAA,cAAc,CAACK,MAAf,CAAsBF,OAAtB,EAA+BhB,UAA/B;AACD;;AACD;AAL4B;AAM7B,GANH;AAOD;;AAED,IAAMmB,aAAa,GAAGnB,UAAtB;AACA,IAAMoB,mBAAmB,GAAGR,qBAA5B;AAEA,SAASO,aAAT,EAAwBC,mBAAxB","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, h, Host, proxyCustomElement } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { m as menuController } from './index5.js';\nimport { u as updateVisibility } from './menu-toggle-util.js';\n\nconst menuToggleCss = \":host(.menu-toggle-hidden){display:none}\";\n\nlet MenuToggle = class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.visible = false;\n    /**\n     * Automatically hides the content when the corresponding menu is not active.\n     *\n     * By default, it's `true`. Change it to `false` in order to\n     * keep `ion-menu-toggle` always visible regardless the state of the menu.\n     */\n    this.autoHide = true;\n    this.onClick = () => {\n      return menuController.toggle(this.menu);\n    };\n  }\n  connectedCallback() {\n    this.visibilityChanged();\n  }\n  async visibilityChanged() {\n    this.visible = await updateVisibility(this.menu);\n  }\n  render() {\n    const mode = getIonMode(this);\n    const hidden = this.autoHide && !this.visible;\n    return (h(Host, { onClick: this.onClick, \"aria-hidden\": hidden ? 'true' : null, class: {\n        [mode]: true,\n        'menu-toggle-hidden': hidden,\n      } }, h(\"slot\", null)));\n  }\n  static get style() { return menuToggleCss; }\n};\nMenuToggle = /*@__PURE__*/ proxyCustomElement(MenuToggle, [1, \"ion-menu-toggle\", {\n    \"menu\": [1],\n    \"autoHide\": [4, \"auto-hide\"],\n    \"visible\": [32]\n  }, [[16, \"ionMenuChange\", \"visibilityChanged\"], [16, \"ionSplitPaneVisible\", \"visibilityChanged\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-menu-toggle\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-menu-toggle\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, MenuToggle);\n      }\n      break;\n  } });\n}\n\nconst IonMenuToggle = MenuToggle;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonMenuToggle, defineCustomElement };\n"]},"metadata":{},"sourceType":"module"}