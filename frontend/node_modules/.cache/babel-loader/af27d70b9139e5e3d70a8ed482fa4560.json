{"ast":null,"code":"import _defineProperty from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _asyncToGenerator from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@babel/runtime/regenerator/index.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, createEvent, writeTask, readTask, h, Host, proxyCustomElement } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { c as componentOnReady } from './helpers.js';\nvar infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\n\nvar InfiniteScroll = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(InfiniteScroll, _HTMLElement);\n\n  var _super = _createSuper(InfiniteScroll);\n\n  function InfiniteScroll() {\n    var _this;\n\n    _classCallCheck(this, InfiniteScroll);\n\n    _this = _super.call(this);\n\n    _this.__registerHost();\n\n    _this.ionInfinite = createEvent(_assertThisInitialized(_this), \"ionInfinite\", 7);\n    _this.thrPx = 0;\n    _this.thrPc = 0;\n    _this.didFire = false;\n    _this.isBusy = false;\n    _this.isLoading = false;\n    /**\n     * The threshold distance from the bottom\n     * of the content to call the `infinite` output event when scrolled.\n     * The threshold value can be either a percent, or\n     * in pixels. For example, use the value of `10%` for the `infinite`\n     * output event to get called when the user has scrolled 10%\n     * from the bottom of the page. Use the value `100px` when the\n     * scroll is within 100 pixels from the bottom of the page.\n     */\n\n    _this.threshold = '15%';\n    /**\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\n     * will be removed.\n     *\n     * Set this to true to disable the infinite scroll from actively\n     * trying to receive new data while scrolling. This is useful\n     * when it is known that there is no more data that can be added, and\n     * the infinite scroll is no longer needed.\n     */\n\n    _this.disabled = false;\n    /**\n     * The position of the infinite scroll element.\n     * The value can be either `top` or `bottom`.\n     */\n\n    _this.position = 'bottom';\n\n    _this.onScroll = function () {\n      var scrollEl = _this.scrollEl;\n\n      if (!scrollEl || !_this.canStart()) {\n        return 1;\n      }\n\n      var infiniteHeight = _this.el.offsetHeight;\n\n      if (infiniteHeight === 0) {\n        // if there is no height of this element then do nothing\n        return 2;\n      }\n\n      var scrollTop = scrollEl.scrollTop;\n      var scrollHeight = scrollEl.scrollHeight;\n      var height = scrollEl.offsetHeight;\n      var threshold = _this.thrPc !== 0 ? height * _this.thrPc : _this.thrPx;\n      var distanceFromInfinite = _this.position === 'bottom' ? scrollHeight - infiniteHeight - scrollTop - threshold - height : scrollTop - infiniteHeight - threshold;\n\n      if (distanceFromInfinite < 0) {\n        if (!_this.didFire) {\n          _this.isLoading = true;\n          _this.didFire = true;\n\n          _this.ionInfinite.emit();\n\n          return 3;\n        }\n      } else {\n        _this.didFire = false;\n      }\n\n      return 4;\n    };\n\n    return _this;\n  }\n\n  _createClass(InfiniteScroll, [{\n    key: \"thresholdChanged\",\n    value: function thresholdChanged() {\n      var val = this.threshold;\n\n      if (val.lastIndexOf('%') > -1) {\n        this.thrPx = 0;\n        this.thrPc = parseFloat(val) / 100;\n      } else {\n        this.thrPx = parseFloat(val);\n        this.thrPc = 0;\n      }\n    }\n  }, {\n    key: \"disabledChanged\",\n    value: function disabledChanged() {\n      var disabled = this.disabled;\n\n      if (disabled) {\n        this.isLoading = false;\n        this.isBusy = false;\n      }\n\n      this.enableScrollEvents(!disabled);\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function () {\n      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var contentEl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                contentEl = this.el.closest('ion-content');\n\n                if (contentEl) {\n                  _context.next = 4;\n                  break;\n                }\n\n                console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n                return _context.abrupt(\"return\");\n\n              case 4:\n                _context.next = 6;\n                return new Promise(function (resolve) {\n                  return componentOnReady(contentEl, resolve);\n                });\n\n              case 6:\n                _context.next = 8;\n                return contentEl.getScrollElement();\n\n              case 8:\n                this.scrollEl = _context.sent;\n                this.thresholdChanged();\n                this.disabledChanged();\n\n                if (this.position === 'top') {\n                  writeTask(function () {\n                    if (_this2.scrollEl) {\n                      _this2.scrollEl.scrollTop = _this2.scrollEl.scrollHeight - _this2.scrollEl.clientHeight;\n                    }\n                  });\n                }\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connectedCallback() {\n        return _connectedCallback.apply(this, arguments);\n      }\n\n      return connectedCallback;\n    }()\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      this.enableScrollEvents(false);\n      this.scrollEl = undefined;\n    }\n    /**\n     * Call `complete()` within the `ionInfinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n\n  }, {\n    key: \"complete\",\n    value: function () {\n      var _complete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        var scrollEl, prev;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                scrollEl = this.scrollEl;\n\n                if (!(!this.isLoading || !scrollEl)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                this.isLoading = false;\n\n                if (this.position === 'top') {\n                  /**\n                   * New content is being added at the top, but the scrollTop position stays the same,\n                   * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n                   * (Frame 1)\n                   *    - complete() is called, but the UI hasn't had time to update yet.\n                   *    - Save the current content dimensions.\n                   *    - Wait for the next frame using _dom.read, so the UI will be updated.\n                   * (Frame 2)\n                   *    - Read the new content dimensions.\n                   *    - Calculate the height difference and the new scroll position.\n                   *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n                   * (Still frame 2, if I'm correct)\n                   *    - Change the scroll position (= visually maintain the scroll position).\n                   *    - Change the state to re-enable the InfiniteScroll.\n                   *    - This should be after changing the scroll position, or it could\n                   *    cause the InfiniteScroll to be triggered again immediately.\n                   * (Frame 3)\n                   *    Done.\n                   */\n                  this.isBusy = true; // ******** DOM READ ****************\n                  // Save the current content dimensions before the UI updates\n\n                  prev = scrollEl.scrollHeight - scrollEl.scrollTop; // ******** DOM READ ****************\n\n                  requestAnimationFrame(function () {\n                    readTask(function () {\n                      // UI has updated, save the new content dimensions\n                      var scrollHeight = scrollEl.scrollHeight; // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n\n                      var newScrollTop = scrollHeight - prev; // ******** DOM WRITE ****************\n\n                      requestAnimationFrame(function () {\n                        writeTask(function () {\n                          scrollEl.scrollTop = newScrollTop;\n                          _this3.isBusy = false;\n                        });\n                      });\n                    });\n                  });\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function complete() {\n        return _complete.apply(this, arguments);\n      }\n\n      return complete;\n    }()\n  }, {\n    key: \"canStart\",\n    value: function canStart() {\n      return !this.disabled && !this.isBusy && !!this.scrollEl && !this.isLoading;\n    }\n  }, {\n    key: \"enableScrollEvents\",\n    value: function enableScrollEvents(shouldListen) {\n      if (this.scrollEl) {\n        if (shouldListen) {\n          this.scrollEl.addEventListener('scroll', this.onScroll);\n        } else {\n          this.scrollEl.removeEventListener('scroll', this.onScroll);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _class;\n\n      var mode = getIonMode(this);\n      var disabled = this.disabled;\n      return h(Host, {\n        class: (_class = {}, _defineProperty(_class, mode, true), _defineProperty(_class, 'infinite-scroll-loading', this.isLoading), _defineProperty(_class, 'infinite-scroll-enabled', !disabled), _class)\n      });\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return this;\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"threshold\": [\"thresholdChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n      };\n    }\n  }, {\n    key: \"style\",\n    get: function get() {\n      return infiniteScrollCss;\n    }\n  }]);\n\n  return InfiniteScroll;\n}(HTMLElement);\n\nInfiniteScroll = /*@__PURE__*/proxyCustomElement(InfiniteScroll, [0, \"ion-infinite-scroll\", {\n  \"threshold\": [1],\n  \"disabled\": [4],\n  \"position\": [1],\n  \"isLoading\": [32],\n  \"complete\": [64]\n}]);\n\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n\n  var components = [\"ion-infinite-scroll\"];\n  components.forEach(function (tagName) {\n    switch (tagName) {\n      case \"ion-infinite-scroll\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, InfiniteScroll);\n        }\n\n        break;\n    }\n  });\n}\n\nvar IonInfiniteScroll = InfiniteScroll;\nvar defineCustomElement = defineCustomElement$1;\nexport { IonInfiniteScroll, defineCustomElement };","map":{"version":3,"sources":["/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@ionic/core/components/ion-infinite-scroll.js"],"names":["HTMLElement","createEvent","writeTask","readTask","h","Host","proxyCustomElement","b","getIonMode","c","componentOnReady","infiniteScrollCss","InfiniteScroll","__registerHost","ionInfinite","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","scrollHeight","height","distanceFromInfinite","emit","val","lastIndexOf","parseFloat","enableScrollEvents","contentEl","closest","console","error","Promise","resolve","getScrollElement","thresholdChanged","disabledChanged","clientHeight","undefined","prev","requestAnimationFrame","newScrollTop","shouldListen","addEventListener","removeEventListener","mode","class","defineCustomElement$1","customElements","components","forEach","tagName","get","define","IonInfiniteScroll","defineCustomElement"],"mappings":"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","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, createEvent, writeTask, readTask, h, Host, proxyCustomElement } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { c as componentOnReady } from './helpers.js';\n\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\n\nlet InfiniteScroll = class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    this.thrPx = 0;\n    this.thrPc = 0;\n    this.didFire = false;\n    this.isBusy = false;\n    this.isLoading = false;\n    /**\n     * The threshold distance from the bottom\n     * of the content to call the `infinite` output event when scrolled.\n     * The threshold value can be either a percent, or\n     * in pixels. For example, use the value of `10%` for the `infinite`\n     * output event to get called when the user has scrolled 10%\n     * from the bottom of the page. Use the value `100px` when the\n     * scroll is within 100 pixels from the bottom of the page.\n     */\n    this.threshold = '15%';\n    /**\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\n     * will be removed.\n     *\n     * Set this to true to disable the infinite scroll from actively\n     * trying to receive new data while scrolling. This is useful\n     * when it is known that there is no more data that can be added, and\n     * the infinite scroll is no longer needed.\n     */\n    this.disabled = false;\n    /**\n     * The position of the infinite scroll element.\n     * The value can be either `top` or `bottom`.\n     */\n    this.position = 'bottom';\n    this.onScroll = () => {\n      const scrollEl = this.scrollEl;\n      if (!scrollEl || !this.canStart()) {\n        return 1;\n      }\n      const infiniteHeight = this.el.offsetHeight;\n      if (infiniteHeight === 0) {\n        // if there is no height of this element then do nothing\n        return 2;\n      }\n      const scrollTop = scrollEl.scrollTop;\n      const scrollHeight = scrollEl.scrollHeight;\n      const height = scrollEl.offsetHeight;\n      const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\n      const distanceFromInfinite = (this.position === 'bottom')\n        ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n        : scrollTop - infiniteHeight - threshold;\n      if (distanceFromInfinite < 0) {\n        if (!this.didFire) {\n          this.isLoading = true;\n          this.didFire = true;\n          this.ionInfinite.emit();\n          return 3;\n        }\n      }\n      else {\n        this.didFire = false;\n      }\n      return 4;\n    };\n  }\n  thresholdChanged() {\n    const val = this.threshold;\n    if (val.lastIndexOf('%') > -1) {\n      this.thrPx = 0;\n      this.thrPc = (parseFloat(val) / 100);\n    }\n    else {\n      this.thrPx = parseFloat(val);\n      this.thrPc = 0;\n    }\n  }\n  disabledChanged() {\n    const disabled = this.disabled;\n    if (disabled) {\n      this.isLoading = false;\n      this.isBusy = false;\n    }\n    this.enableScrollEvents(!disabled);\n  }\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n    if (!contentEl) {\n      console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n      return;\n    }\n    await new Promise(resolve => componentOnReady(contentEl, resolve));\n    this.scrollEl = await contentEl.getScrollElement();\n    this.thresholdChanged();\n    this.disabledChanged();\n    if (this.position === 'top') {\n      writeTask(() => {\n        if (this.scrollEl) {\n          this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n        }\n      });\n    }\n  }\n  disconnectedCallback() {\n    this.enableScrollEvents(false);\n    this.scrollEl = undefined;\n  }\n  /**\n   * Call `complete()` within the `ionInfinite` output event handler when\n   * your async operation has completed. For example, the `loading`\n   * state is while the app is performing an asynchronous operation,\n   * such as receiving more data from an AJAX request to add more items\n   * to a data list. Once the data has been received and UI updated, you\n   * then call this method to signify that the loading has completed.\n   * This method will change the infinite scroll's state from `loading`\n   * to `enabled`.\n   */\n  async complete() {\n    const scrollEl = this.scrollEl;\n    if (!this.isLoading || !scrollEl) {\n      return;\n    }\n    this.isLoading = false;\n    if (this.position === 'top') {\n      /**\n       * New content is being added at the top, but the scrollTop position stays the same,\n       * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n       * (Frame 1)\n       *    - complete() is called, but the UI hasn't had time to update yet.\n       *    - Save the current content dimensions.\n       *    - Wait for the next frame using _dom.read, so the UI will be updated.\n       * (Frame 2)\n       *    - Read the new content dimensions.\n       *    - Calculate the height difference and the new scroll position.\n       *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n       * (Still frame 2, if I'm correct)\n       *    - Change the scroll position (= visually maintain the scroll position).\n       *    - Change the state to re-enable the InfiniteScroll.\n       *    - This should be after changing the scroll position, or it could\n       *    cause the InfiniteScroll to be triggered again immediately.\n       * (Frame 3)\n       *    Done.\n       */\n      this.isBusy = true;\n      // ******** DOM READ ****************\n      // Save the current content dimensions before the UI updates\n      const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n      // ******** DOM READ ****************\n      requestAnimationFrame(() => {\n        readTask(() => {\n          // UI has updated, save the new content dimensions\n          const scrollHeight = scrollEl.scrollHeight;\n          // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n          const newScrollTop = scrollHeight - prev;\n          // ******** DOM WRITE ****************\n          requestAnimationFrame(() => {\n            writeTask(() => {\n              scrollEl.scrollTop = newScrollTop;\n              this.isBusy = false;\n            });\n          });\n        });\n      });\n    }\n  }\n  canStart() {\n    return (!this.disabled &&\n      !this.isBusy &&\n      !!this.scrollEl &&\n      !this.isLoading);\n  }\n  enableScrollEvents(shouldListen) {\n    if (this.scrollEl) {\n      if (shouldListen) {\n        this.scrollEl.addEventListener('scroll', this.onScroll);\n      }\n      else {\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\n      }\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    const disabled = this.disabled;\n    return (h(Host, { class: {\n        [mode]: true,\n        'infinite-scroll-loading': this.isLoading,\n        'infinite-scroll-enabled': !disabled\n      } }));\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"threshold\": [\"thresholdChanged\"],\n    \"disabled\": [\"disabledChanged\"]\n  }; }\n  static get style() { return infiniteScrollCss; }\n};\nInfiniteScroll = /*@__PURE__*/ proxyCustomElement(InfiniteScroll, [0, \"ion-infinite-scroll\", {\n    \"threshold\": [1],\n    \"disabled\": [4],\n    \"position\": [1],\n    \"isLoading\": [32],\n    \"complete\": [64]\n  }]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-infinite-scroll\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-infinite-scroll\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, InfiniteScroll);\n      }\n      break;\n  } });\n}\n\nconst IonInfiniteScroll = InfiniteScroll;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonInfiniteScroll, defineCustomElement };\n"]},"metadata":{},"sourceType":"module"}