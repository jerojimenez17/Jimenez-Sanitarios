{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, createEvent, writeTask, readTask, h, Host, proxyCustomElement } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { c as componentOnReady } from './helpers.js';\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\nlet InfiniteScroll = class extends HTMLElement {\n  constructor() {\n    super();\n\n    this.__registerHost();\n\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    this.thrPx = 0;\n    this.thrPc = 0;\n    this.didFire = false;\n    this.isBusy = false;\n    this.isLoading = false;\n    /**\n     * The threshold distance from the bottom\n     * of the content to call the `infinite` output event when scrolled.\n     * The threshold value can be either a percent, or\n     * in pixels. For example, use the value of `10%` for the `infinite`\n     * output event to get called when the user has scrolled 10%\n     * from the bottom of the page. Use the value `100px` when the\n     * scroll is within 100 pixels from the bottom of the page.\n     */\n\n    this.threshold = '15%';\n    /**\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\n     * will be removed.\n     *\n     * Set this to true to disable the infinite scroll from actively\n     * trying to receive new data while scrolling. This is useful\n     * when it is known that there is no more data that can be added, and\n     * the infinite scroll is no longer needed.\n     */\n\n    this.disabled = false;\n    /**\n     * The position of the infinite scroll element.\n     * The value can be either `top` or `bottom`.\n     */\n\n    this.position = 'bottom';\n\n    this.onScroll = () => {\n      const scrollEl = this.scrollEl;\n\n      if (!scrollEl || !this.canStart()) {\n        return 1;\n      }\n\n      const infiniteHeight = this.el.offsetHeight;\n\n      if (infiniteHeight === 0) {\n        // if there is no height of this element then do nothing\n        return 2;\n      }\n\n      const scrollTop = scrollEl.scrollTop;\n      const scrollHeight = scrollEl.scrollHeight;\n      const height = scrollEl.offsetHeight;\n      const threshold = this.thrPc !== 0 ? height * this.thrPc : this.thrPx;\n      const distanceFromInfinite = this.position === 'bottom' ? scrollHeight - infiniteHeight - scrollTop - threshold - height : scrollTop - infiniteHeight - threshold;\n\n      if (distanceFromInfinite < 0) {\n        if (!this.didFire) {\n          this.isLoading = true;\n          this.didFire = true;\n          this.ionInfinite.emit();\n          return 3;\n        }\n      } else {\n        this.didFire = false;\n      }\n\n      return 4;\n    };\n  }\n\n  thresholdChanged() {\n    const val = this.threshold;\n\n    if (val.lastIndexOf('%') > -1) {\n      this.thrPx = 0;\n      this.thrPc = parseFloat(val) / 100;\n    } else {\n      this.thrPx = parseFloat(val);\n      this.thrPc = 0;\n    }\n  }\n\n  disabledChanged() {\n    const disabled = this.disabled;\n\n    if (disabled) {\n      this.isLoading = false;\n      this.isBusy = false;\n    }\n\n    this.enableScrollEvents(!disabled);\n  }\n\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n\n    if (!contentEl) {\n      console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n      return;\n    }\n\n    await new Promise(resolve => componentOnReady(contentEl, resolve));\n    this.scrollEl = await contentEl.getScrollElement();\n    this.thresholdChanged();\n    this.disabledChanged();\n\n    if (this.position === 'top') {\n      writeTask(() => {\n        if (this.scrollEl) {\n          this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n        }\n      });\n    }\n  }\n\n  disconnectedCallback() {\n    this.enableScrollEvents(false);\n    this.scrollEl = undefined;\n  }\n  /**\n   * Call `complete()` within the `ionInfinite` output event handler when\n   * your async operation has completed. For example, the `loading`\n   * state is while the app is performing an asynchronous operation,\n   * such as receiving more data from an AJAX request to add more items\n   * to a data list. Once the data has been received and UI updated, you\n   * then call this method to signify that the loading has completed.\n   * This method will change the infinite scroll's state from `loading`\n   * to `enabled`.\n   */\n\n\n  async complete() {\n    const scrollEl = this.scrollEl;\n\n    if (!this.isLoading || !scrollEl) {\n      return;\n    }\n\n    this.isLoading = false;\n\n    if (this.position === 'top') {\n      /**\n       * New content is being added at the top, but the scrollTop position stays the same,\n       * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n       * (Frame 1)\n       *    - complete() is called, but the UI hasn't had time to update yet.\n       *    - Save the current content dimensions.\n       *    - Wait for the next frame using _dom.read, so the UI will be updated.\n       * (Frame 2)\n       *    - Read the new content dimensions.\n       *    - Calculate the height difference and the new scroll position.\n       *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n       * (Still frame 2, if I'm correct)\n       *    - Change the scroll position (= visually maintain the scroll position).\n       *    - Change the state to re-enable the InfiniteScroll.\n       *    - This should be after changing the scroll position, or it could\n       *    cause the InfiniteScroll to be triggered again immediately.\n       * (Frame 3)\n       *    Done.\n       */\n      this.isBusy = true; // ******** DOM READ ****************\n      // Save the current content dimensions before the UI updates\n\n      const prev = scrollEl.scrollHeight - scrollEl.scrollTop; // ******** DOM READ ****************\n\n      requestAnimationFrame(() => {\n        readTask(() => {\n          // UI has updated, save the new content dimensions\n          const scrollHeight = scrollEl.scrollHeight; // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n\n          const newScrollTop = scrollHeight - prev; // ******** DOM WRITE ****************\n\n          requestAnimationFrame(() => {\n            writeTask(() => {\n              scrollEl.scrollTop = newScrollTop;\n              this.isBusy = false;\n            });\n          });\n        });\n      });\n    }\n  }\n\n  canStart() {\n    return !this.disabled && !this.isBusy && !!this.scrollEl && !this.isLoading;\n  }\n\n  enableScrollEvents(shouldListen) {\n    if (this.scrollEl) {\n      if (shouldListen) {\n        this.scrollEl.addEventListener('scroll', this.onScroll);\n      } else {\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\n      }\n    }\n  }\n\n  render() {\n    const mode = getIonMode(this);\n    const disabled = this.disabled;\n    return h(Host, {\n      class: {\n        [mode]: true,\n        'infinite-scroll-loading': this.isLoading,\n        'infinite-scroll-enabled': !disabled\n      }\n    });\n  }\n\n  get el() {\n    return this;\n  }\n\n  static get watchers() {\n    return {\n      \"threshold\": [\"thresholdChanged\"],\n      \"disabled\": [\"disabledChanged\"]\n    };\n  }\n\n  static get style() {\n    return infiniteScrollCss;\n  }\n\n};\nInfiniteScroll = /*@__PURE__*/proxyCustomElement(InfiniteScroll, [0, \"ion-infinite-scroll\", {\n  \"threshold\": [1],\n  \"disabled\": [4],\n  \"position\": [1],\n  \"isLoading\": [32],\n  \"complete\": [64]\n}]);\n\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n\n  const components = [\"ion-infinite-scroll\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-infinite-scroll\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, InfiniteScroll);\n        }\n\n        break;\n    }\n  });\n}\n\nconst IonInfiniteScroll = InfiniteScroll;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonInfiniteScroll, defineCustomElement };","map":{"version":3,"sources":["/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@ionic/core/components/ion-infinite-scroll.js"],"names":["HTMLElement","createEvent","writeTask","readTask","h","Host","proxyCustomElement","b","getIonMode","c","componentOnReady","infiniteScrollCss","InfiniteScroll","constructor","__registerHost","ionInfinite","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","scrollHeight","height","distanceFromInfinite","emit","thresholdChanged","val","lastIndexOf","parseFloat","disabledChanged","enableScrollEvents","connectedCallback","contentEl","closest","console","error","Promise","resolve","getScrollElement","clientHeight","disconnectedCallback","undefined","complete","prev","requestAnimationFrame","newScrollTop","shouldListen","addEventListener","removeEventListener","render","mode","class","watchers","style","defineCustomElement$1","customElements","components","forEach","tagName","get","define","IonInfiniteScroll","defineCustomElement"],"mappings":"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","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, createEvent, writeTask, readTask, h, Host, proxyCustomElement } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { c as componentOnReady } from './helpers.js';\n\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\n\nlet InfiniteScroll = class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    this.thrPx = 0;\n    this.thrPc = 0;\n    this.didFire = false;\n    this.isBusy = false;\n    this.isLoading = false;\n    /**\n     * The threshold distance from the bottom\n     * of the content to call the `infinite` output event when scrolled.\n     * The threshold value can be either a percent, or\n     * in pixels. For example, use the value of `10%` for the `infinite`\n     * output event to get called when the user has scrolled 10%\n     * from the bottom of the page. Use the value `100px` when the\n     * scroll is within 100 pixels from the bottom of the page.\n     */\n    this.threshold = '15%';\n    /**\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\n     * will be removed.\n     *\n     * Set this to true to disable the infinite scroll from actively\n     * trying to receive new data while scrolling. This is useful\n     * when it is known that there is no more data that can be added, and\n     * the infinite scroll is no longer needed.\n     */\n    this.disabled = false;\n    /**\n     * The position of the infinite scroll element.\n     * The value can be either `top` or `bottom`.\n     */\n    this.position = 'bottom';\n    this.onScroll = () => {\n      const scrollEl = this.scrollEl;\n      if (!scrollEl || !this.canStart()) {\n        return 1;\n      }\n      const infiniteHeight = this.el.offsetHeight;\n      if (infiniteHeight === 0) {\n        // if there is no height of this element then do nothing\n        return 2;\n      }\n      const scrollTop = scrollEl.scrollTop;\n      const scrollHeight = scrollEl.scrollHeight;\n      const height = scrollEl.offsetHeight;\n      const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\n      const distanceFromInfinite = (this.position === 'bottom')\n        ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n        : scrollTop - infiniteHeight - threshold;\n      if (distanceFromInfinite < 0) {\n        if (!this.didFire) {\n          this.isLoading = true;\n          this.didFire = true;\n          this.ionInfinite.emit();\n          return 3;\n        }\n      }\n      else {\n        this.didFire = false;\n      }\n      return 4;\n    };\n  }\n  thresholdChanged() {\n    const val = this.threshold;\n    if (val.lastIndexOf('%') > -1) {\n      this.thrPx = 0;\n      this.thrPc = (parseFloat(val) / 100);\n    }\n    else {\n      this.thrPx = parseFloat(val);\n      this.thrPc = 0;\n    }\n  }\n  disabledChanged() {\n    const disabled = this.disabled;\n    if (disabled) {\n      this.isLoading = false;\n      this.isBusy = false;\n    }\n    this.enableScrollEvents(!disabled);\n  }\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n    if (!contentEl) {\n      console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n      return;\n    }\n    await new Promise(resolve => componentOnReady(contentEl, resolve));\n    this.scrollEl = await contentEl.getScrollElement();\n    this.thresholdChanged();\n    this.disabledChanged();\n    if (this.position === 'top') {\n      writeTask(() => {\n        if (this.scrollEl) {\n          this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n        }\n      });\n    }\n  }\n  disconnectedCallback() {\n    this.enableScrollEvents(false);\n    this.scrollEl = undefined;\n  }\n  /**\n   * Call `complete()` within the `ionInfinite` output event handler when\n   * your async operation has completed. For example, the `loading`\n   * state is while the app is performing an asynchronous operation,\n   * such as receiving more data from an AJAX request to add more items\n   * to a data list. Once the data has been received and UI updated, you\n   * then call this method to signify that the loading has completed.\n   * This method will change the infinite scroll's state from `loading`\n   * to `enabled`.\n   */\n  async complete() {\n    const scrollEl = this.scrollEl;\n    if (!this.isLoading || !scrollEl) {\n      return;\n    }\n    this.isLoading = false;\n    if (this.position === 'top') {\n      /**\n       * New content is being added at the top, but the scrollTop position stays the same,\n       * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n       * (Frame 1)\n       *    - complete() is called, but the UI hasn't had time to update yet.\n       *    - Save the current content dimensions.\n       *    - Wait for the next frame using _dom.read, so the UI will be updated.\n       * (Frame 2)\n       *    - Read the new content dimensions.\n       *    - Calculate the height difference and the new scroll position.\n       *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n       * (Still frame 2, if I'm correct)\n       *    - Change the scroll position (= visually maintain the scroll position).\n       *    - Change the state to re-enable the InfiniteScroll.\n       *    - This should be after changing the scroll position, or it could\n       *    cause the InfiniteScroll to be triggered again immediately.\n       * (Frame 3)\n       *    Done.\n       */\n      this.isBusy = true;\n      // ******** DOM READ ****************\n      // Save the current content dimensions before the UI updates\n      const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n      // ******** DOM READ ****************\n      requestAnimationFrame(() => {\n        readTask(() => {\n          // UI has updated, save the new content dimensions\n          const scrollHeight = scrollEl.scrollHeight;\n          // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n          const newScrollTop = scrollHeight - prev;\n          // ******** DOM WRITE ****************\n          requestAnimationFrame(() => {\n            writeTask(() => {\n              scrollEl.scrollTop = newScrollTop;\n              this.isBusy = false;\n            });\n          });\n        });\n      });\n    }\n  }\n  canStart() {\n    return (!this.disabled &&\n      !this.isBusy &&\n      !!this.scrollEl &&\n      !this.isLoading);\n  }\n  enableScrollEvents(shouldListen) {\n    if (this.scrollEl) {\n      if (shouldListen) {\n        this.scrollEl.addEventListener('scroll', this.onScroll);\n      }\n      else {\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\n      }\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    const disabled = this.disabled;\n    return (h(Host, { class: {\n        [mode]: true,\n        'infinite-scroll-loading': this.isLoading,\n        'infinite-scroll-enabled': !disabled\n      } }));\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"threshold\": [\"thresholdChanged\"],\n    \"disabled\": [\"disabledChanged\"]\n  }; }\n  static get style() { return infiniteScrollCss; }\n};\nInfiniteScroll = /*@__PURE__*/ proxyCustomElement(InfiniteScroll, [0, \"ion-infinite-scroll\", {\n    \"threshold\": [1],\n    \"disabled\": [4],\n    \"position\": [1],\n    \"isLoading\": [32],\n    \"complete\": [64]\n  }]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-infinite-scroll\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-infinite-scroll\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, InfiniteScroll);\n      }\n      break;\n  } });\n}\n\nconst IonInfiniteScroll = InfiniteScroll;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonInfiniteScroll, defineCustomElement };\n"]},"metadata":{},"sourceType":"module"}