{"ast":null,"code":"const toProductCart = product => {\n  return { ...product,\n    amount: 1\n  };\n};\n\nexport const CartReducer = (state, action) => {\n  switch (action.type) {\n    case 'addItem':\n      toProductCart(action.payload);\n      return { ...state,\n        products: [...state.products, action.payload],\n        amount: state.amount + 1,\n        total: state.total + parseFloat(action.payload.price)\n      };\n\n    case 'removeItem':\n      return { ...state,\n        products: [...state.products.slice(0, action.payload), ...state.products.slice(action.payload + 1)],\n        amount: state.amount - 1,\n        total: state.total - parseFloat(state.products[action.payload].price)\n      };\n\n    case 'removeAll':\n      return { ...state,\n        products: [],\n        amount: 0,\n        total: 0\n      };\n\n    case 'updateAmount':\n      return { ...state,\n        products: state.products.map(product => {\n          if (product.id === Number(action.payload.id)) {\n            state.amount = state.amount + 1;\n            state.total = state.total + parseFloat(product.price);\n            return { ...product,\n              amount: product.amount + 1\n            };\n          }\n\n          return product;\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n_c = CartReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartReducer\");","map":{"version":3,"sources":["/home/jero/Documentos/IonicReactApp/cursoreact/src/context/CartReducer.ts"],"names":["toProductCart","product","amount","CartReducer","state","action","type","payload","products","total","parseFloat","price","slice","map","id","Number"],"mappings":"AAWA,MAAMA,aAAa,GAAGC,OAAD,IAAkC;AACnD,SAAO,EACH,GAAGA,OADA;AAEHC,IAAAA,MAAM,EAAE;AAFL,GAAP;AAIH,CALD;;AAQA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAmBC,MAAnB,KAA0C;AACjE,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,SAAL;AACIN,MAAAA,aAAa,CAACK,MAAM,CAACE,OAAR,CAAb;AACA,aAAO,EACH,GAAGH,KADA;AAEHI,QAAAA,QAAQ,EAAE,CAAC,GAAGJ,KAAK,CAACI,QAAV,EAAoBH,MAAM,CAACE,OAA3B,CAFP;AAGHL,QAAAA,MAAM,EAAEE,KAAK,CAACF,MAAN,GAAe,CAHpB;AAIHO,QAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,GAAcC,UAAU,CAACL,MAAM,CAACE,OAAP,CAAeI,KAAhB;AAJ5B,OAAP;;AAMJ,SAAK,YAAL;AACI,aAAO,EACH,GAAGP,KADA;AAEHI,QAAAA,QAAQ,EAAC,CAAC,GAAGJ,KAAK,CAACI,QAAN,CAAeI,KAAf,CAAqB,CAArB,EAAuBP,MAAM,CAACE,OAA9B,CAAJ,EAA4C,GAAGH,KAAK,CAACI,QAAN,CAAeI,KAAf,CAAqBP,MAAM,CAACE,OAAP,GAAe,CAApC,CAA/C,CAFN;AAGHL,QAAAA,MAAM,EAAEE,KAAK,CAACF,MAAN,GAAe,CAHpB;AAIHO,QAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,GAAcC,UAAU,CAACN,KAAK,CAACI,QAAN,CAAeH,MAAM,CAACE,OAAtB,EAA+BI,KAAhC;AAJ5B,OAAP;;AAMJ,SAAK,WAAL;AACI,aAAO,EACH,GAAGP,KADA;AAEHI,QAAAA,QAAQ,EAAC,EAFN;AAGHN,QAAAA,MAAM,EAAE,CAHL;AAIHO,QAAAA,KAAK,EAAE;AAJJ,OAAP;;AAMJ,SAAK,cAAL;AACI,aAAO,EACH,GAAGL,KADA;AAEHI,QAAAA,QAAQ,EAAEJ,KAAK,CAACI,QAAN,CAAeK,GAAf,CAAmBZ,OAAO,IAAI;AACpC,cAAGA,OAAO,CAACa,EAAR,KAAeC,MAAM,CAAEV,MAAM,CAACE,OAAP,CAAeO,EAAjB,CAAxB,EAA6C;AACzCV,YAAAA,KAAK,CAACF,MAAN,GAAeE,KAAK,CAACF,MAAN,GAAe,CAA9B;AACAE,YAAAA,KAAK,CAACK,KAAN,GAAcL,KAAK,CAACK,KAAN,GAAcC,UAAU,CAACT,OAAO,CAACU,KAAT,CAAtC;AACA,mBAAO,EACH,GAAGV,OADA;AAEHC,cAAAA,MAAM,EAAED,OAAO,CAACC,MAAR,GAAiB;AAFtB,aAAP;AAIH;;AACD,iBAAOD,OAAP;AACH,SAVS;AAFP,OAAP;;AAeJ;AACI,aAAOG,KAAP;AAxCR;AA2CH,CA5CM;KAAMD,W","sourcesContent":["import CartState from \"../interfaces/CartState\";\nimport Product from \"../interfaces/Product\";\nimport ProductCart from \"../interfaces/ProductCart\";\n\ntype CartAction = \n   | {type:'addItem', payload: Product}\n   | {type:'removeItem', payload: number}\n    | {type:'removeAll', payload: Product}\n    | {type:'updateAmount', payload: {id:string}}\n    | {type:'updateTotal', payload: ProductCart};\n\nconst toProductCart= (product: Product):ProductCart => {\n    return {\n        ...product,\n        amount: 1,\n    }\n}\n\n\nexport const CartReducer = (state: CartState, action: CartAction) => {\n    switch(action.type){\n        case 'addItem':\n            toProductCart(action.payload);\n            return {\n                ...state,\n                products: [...state.products, action.payload],\n                amount: state.amount + 1,\n                total: state.total + parseFloat(action.payload.price)\n            }\n        case 'removeItem':\n            return {\n                ...state,\n                products:[...state.products.slice(0,action.payload), ...state.products.slice(action.payload+1)],\n                amount: state.amount - 1,\n                total: state.total - parseFloat(state.products[action.payload].price)\n            }\n        case 'removeAll':\n            return {\n                ...state,\n                products:[],  \n                amount: 0,\n                total: 0  \n            }\n        case 'updateAmount':\n            return {\n                ...state,\n                products: state.products.map(product => {\n                    if(product.id === Number( action.payload.id)){\n                        state.amount = state.amount + 1;\n                        state.total = state.total + parseFloat(product.price);\n                        return {\n                            ...product,\n                            amount: product.amount + 1\n                        }\n                    }\n                    return product;\n                }),    \n            }\n\n        default:\n            return state;\n\n    }\n}"]},"metadata":{},"sourceType":"module"}