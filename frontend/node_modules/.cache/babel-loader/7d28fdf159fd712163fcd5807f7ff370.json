{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, h, Host, proxyCustomElement } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { m as menuController } from './index5.js';\nimport { u as updateVisibility } from './menu-toggle-util.js';\nconst menuToggleCss = \":host(.menu-toggle-hidden){display:none}\";\nlet MenuToggle = class extends HTMLElement {\n  constructor() {\n    super();\n\n    this.__registerHost();\n\n    this.__attachShadow();\n\n    this.visible = false;\n    /**\n     * Automatically hides the content when the corresponding menu is not active.\n     *\n     * By default, it's `true`. Change it to `false` in order to\n     * keep `ion-menu-toggle` always visible regardless the state of the menu.\n     */\n\n    this.autoHide = true;\n\n    this.onClick = () => {\n      return menuController.toggle(this.menu);\n    };\n  }\n\n  connectedCallback() {\n    this.visibilityChanged();\n  }\n\n  async visibilityChanged() {\n    this.visible = await updateVisibility(this.menu);\n  }\n\n  render() {\n    const mode = getIonMode(this);\n    const hidden = this.autoHide && !this.visible;\n    return h(Host, {\n      onClick: this.onClick,\n      \"aria-hidden\": hidden ? 'true' : null,\n      class: {\n        [mode]: true,\n        'menu-toggle-hidden': hidden\n      }\n    }, h(\"slot\", null));\n  }\n\n  static get style() {\n    return menuToggleCss;\n  }\n\n};\nMenuToggle = /*@__PURE__*/proxyCustomElement(MenuToggle, [1, \"ion-menu-toggle\", {\n  \"menu\": [1],\n  \"autoHide\": [4, \"auto-hide\"],\n  \"visible\": [32]\n}, [[16, \"ionMenuChange\", \"visibilityChanged\"], [16, \"ionSplitPaneVisible\", \"visibilityChanged\"]]]);\n\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n\n  const components = [\"ion-menu-toggle\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-menu-toggle\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, MenuToggle);\n        }\n\n        break;\n    }\n  });\n}\n\nconst IonMenuToggle = MenuToggle;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonMenuToggle, defineCustomElement };","map":{"version":3,"sources":["/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@ionic/core/components/ion-menu-toggle.js"],"names":["HTMLElement","h","Host","proxyCustomElement","b","getIonMode","m","menuController","u","updateVisibility","menuToggleCss","MenuToggle","constructor","__registerHost","__attachShadow","visible","autoHide","onClick","toggle","menu","connectedCallback","visibilityChanged","render","mode","hidden","class","style","defineCustomElement$1","customElements","components","forEach","tagName","get","define","IonMenuToggle","defineCustomElement"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,WAAT,EAAsBC,CAAtB,EAAyBC,IAAzB,EAA+BC,kBAA/B,QAAyD,+BAAzD;AACA,SAASC,CAAC,IAAIC,UAAd,QAAgC,mBAAhC;AACA,SAASC,CAAC,IAAIC,cAAd,QAAoC,aAApC;AACA,SAASC,CAAC,IAAIC,gBAAd,QAAsC,uBAAtC;AAEA,MAAMC,aAAa,GAAG,0CAAtB;AAEA,IAAIC,UAAU,GAAG,cAAcX,WAAd,CAA0B;AACzCY,EAAAA,WAAW,GAAG;AACZ;;AACA,SAAKC,cAAL;;AACA,SAAKC,cAAL;;AACA,SAAKC,OAAL,GAAe,KAAf;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,QAAL,GAAgB,IAAhB;;AACA,SAAKC,OAAL,GAAe,MAAM;AACnB,aAAOV,cAAc,CAACW,MAAf,CAAsB,KAAKC,IAA3B,CAAP;AACD,KAFD;AAGD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,iBAAL;AACD;;AACsB,QAAjBA,iBAAiB,GAAG;AACxB,SAAKN,OAAL,GAAe,MAAMN,gBAAgB,CAAC,KAAKU,IAAN,CAArC;AACD;;AACDG,EAAAA,MAAM,GAAG;AACP,UAAMC,IAAI,GAAGlB,UAAU,CAAC,IAAD,CAAvB;AACA,UAAMmB,MAAM,GAAG,KAAKR,QAAL,IAAiB,CAAC,KAAKD,OAAtC;AACA,WAAQd,CAAC,CAACC,IAAD,EAAO;AAAEe,MAAAA,OAAO,EAAE,KAAKA,OAAhB;AAAyB,qBAAeO,MAAM,GAAG,MAAH,GAAY,IAA1D;AAAgEC,MAAAA,KAAK,EAAE;AACnF,SAACF,IAAD,GAAQ,IAD2E;AAEnF,8BAAsBC;AAF6D;AAAvE,KAAP,EAGFvB,CAAC,CAAC,MAAD,EAAS,IAAT,CAHC,CAAT;AAID;;AACe,aAALyB,KAAK,GAAG;AAAE,WAAOhB,aAAP;AAAuB;;AA/BH,CAA3C;AAiCAC,UAAU,GAAG,aAAcR,kBAAkB,CAACQ,UAAD,EAAa,CAAC,CAAD,EAAI,iBAAJ,EAAuB;AAC7E,UAAQ,CAAC,CAAD,CADqE;AAE7E,cAAY,CAAC,CAAD,EAAI,WAAJ,CAFiE;AAG7E,aAAW,CAAC,EAAD;AAHkE,CAAvB,EAIrD,CAAC,CAAC,EAAD,EAAK,eAAL,EAAsB,mBAAtB,CAAD,EAA6C,CAAC,EAAD,EAAK,qBAAL,EAA4B,mBAA5B,CAA7C,CAJqD,CAAb,CAA7C;;AAKA,SAASgB,qBAAT,GAAiC;AAC/B,MAAI,OAAOC,cAAP,KAA0B,WAA9B,EAA2C;AACzC;AACD;;AACD,QAAMC,UAAU,GAAG,CAAC,iBAAD,CAAnB;AACAA,EAAAA,UAAU,CAACC,OAAX,CAAmBC,OAAO,IAAI;AAAE,YAAQA,OAAR;AAC9B,WAAK,iBAAL;AACE,YAAI,CAACH,cAAc,CAACI,GAAf,CAAmBD,OAAnB,CAAL,EAAkC;AAChCH,UAAAA,cAAc,CAACK,MAAf,CAAsBF,OAAtB,EAA+BpB,UAA/B;AACD;;AACD;AAL4B;AAM7B,GANH;AAOD;;AAED,MAAMuB,aAAa,GAAGvB,UAAtB;AACA,MAAMwB,mBAAmB,GAAGR,qBAA5B;AAEA,SAASO,aAAT,EAAwBC,mBAAxB","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, h, Host, proxyCustomElement } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { m as menuController } from './index5.js';\nimport { u as updateVisibility } from './menu-toggle-util.js';\n\nconst menuToggleCss = \":host(.menu-toggle-hidden){display:none}\";\n\nlet MenuToggle = class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.visible = false;\n    /**\n     * Automatically hides the content when the corresponding menu is not active.\n     *\n     * By default, it's `true`. Change it to `false` in order to\n     * keep `ion-menu-toggle` always visible regardless the state of the menu.\n     */\n    this.autoHide = true;\n    this.onClick = () => {\n      return menuController.toggle(this.menu);\n    };\n  }\n  connectedCallback() {\n    this.visibilityChanged();\n  }\n  async visibilityChanged() {\n    this.visible = await updateVisibility(this.menu);\n  }\n  render() {\n    const mode = getIonMode(this);\n    const hidden = this.autoHide && !this.visible;\n    return (h(Host, { onClick: this.onClick, \"aria-hidden\": hidden ? 'true' : null, class: {\n        [mode]: true,\n        'menu-toggle-hidden': hidden,\n      } }, h(\"slot\", null)));\n  }\n  static get style() { return menuToggleCss; }\n};\nMenuToggle = /*@__PURE__*/ proxyCustomElement(MenuToggle, [1, \"ion-menu-toggle\", {\n    \"menu\": [1],\n    \"autoHide\": [4, \"auto-hide\"],\n    \"visible\": [32]\n  }, [[16, \"ionMenuChange\", \"visibilityChanged\"], [16, \"ionSplitPaneVisible\", \"visibilityChanged\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-menu-toggle\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-menu-toggle\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, MenuToggle);\n      }\n      break;\n  } });\n}\n\nconst IonMenuToggle = MenuToggle;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonMenuToggle, defineCustomElement };\n"]},"metadata":{},"sourceType":"module"}