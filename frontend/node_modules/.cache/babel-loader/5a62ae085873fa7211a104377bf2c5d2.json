{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, createEvent, h, Host, proxyCustomElement } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { r as raf, g as getElementRoot } from './helpers.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic.js';\nimport { c as createColorClasses } from './theme.js';\nconst pickerColumnInternalIosCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{height:34px;line-height:34px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty{scroll-snap-align:none}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\nconst pickerColumnInternalMdCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{height:34px;line-height:34px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty{scroll-snap-align:none}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}:host .picker-item-active{color:var(--ion-color-base)}\";\nlet PickerColumnInternal = class extends HTMLElement {\n  constructor() {\n    var _this;\n\n    super();\n    _this = this;\n\n    this.__registerHost();\n\n    this.__attachShadow();\n\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.hapticsStarted = false;\n    this.isColumnVisible = false;\n    this.isActive = false;\n    /**\n     * A list of options to be displayed in the picker\n     */\n\n    this.items = [];\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n\n    this.color = 'primary';\n    /**\n     * If `true`, tapping the picker will\n     * reveal a number input keyboard that lets\n     * the user type in values for each picker\n     * column. This is useful when working\n     * with time pickers.\n     *\n     * @internal\n     */\n\n    this.numericInput = false;\n\n    this.centerPickerItemInView = function (target) {\n      let smooth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      _this.el.scroll({\n        // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n        top: target.offsetTop - 3 * target.clientHeight + target.clientHeight / 2,\n        left: 0,\n        behavior: smooth ? 'smooth' : undefined\n      });\n    };\n    /**\n     * When ionInputModeChange is emitted, each column\n     * needs to check if it is the one being made available\n     * for text entry.\n     */\n\n\n    this.inputModeChange = ev => {\n      if (!this.numericInput) {\n        return;\n      }\n\n      const {\n        useInputMode,\n        inputModeColumn\n      } = ev.detail;\n      /**\n       * If inputModeColumn is undefined then this means\n       * all numericInput columns are being selected.\n       */\n\n      const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\n\n      if (!useInputMode || !isColumnActive) {\n        this.isActive = false;\n        return;\n      }\n\n      this.isActive = true;\n    };\n    /**\n     * When the column scrolls, the component\n     * needs to determine which item is centered\n     * in the view and will emit an ionChange with\n     * the item object.\n     */\n\n\n    this.initializeScrollListener = () => {\n      const {\n        el\n      } = this;\n      let timeout;\n      let activeEl = this.activeItem;\n\n      const scrollCallback = () => {\n        raf(() => {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n          }\n\n          if (!this.hapticsStarted) {\n            hapticSelectionStart();\n            this.hapticsStarted = true;\n          }\n          /**\n           * Select item in the center of the column\n           * which is the month/year that we want to select\n           */\n\n\n          const bbox = el.getBoundingClientRect();\n          const centerX = bbox.x + bbox.width / 2;\n          const centerY = bbox.y + bbox.height / 2;\n          const activeElement = el.shadowRoot.elementFromPoint(centerX, centerY);\n\n          if (activeEl !== null) {\n            activeEl.classList.remove(PICKER_COL_ACTIVE);\n          }\n          /**\n           * If we are selecting a new value,\n           * we need to run haptics again.\n           */\n\n\n          if (activeElement !== activeEl) {\n            hapticSelectionChanged();\n          }\n\n          activeEl = activeElement;\n          activeElement.classList.add(PICKER_COL_ACTIVE);\n          timeout = setTimeout(() => {\n            const dataIndex = activeElement.getAttribute('data-index');\n            /**\n             * If no value it is\n             * possible we hit one of the\n             * empty padding columns.\n             */\n\n            if (dataIndex === null) {\n              return;\n            }\n\n            const index = parseInt(dataIndex, 10);\n            const selectedItem = this.items[index];\n\n            if (selectedItem.value !== this.value) {\n              this.value = selectedItem.value;\n              hapticSelectionEnd();\n              this.hapticsStarted = false;\n            }\n          }, 250);\n        });\n      };\n      /**\n       * Wrap this in an raf so that the scroll callback\n       * does not fire when component is initially shown.\n       */\n\n\n      raf(() => {\n        el.addEventListener('scroll', scrollCallback);\n\n        this.destroyScrollListener = () => {\n          el.removeEventListener('scroll', scrollCallback);\n        };\n      });\n    };\n  }\n\n  valueChange() {\n    if (this.isColumnVisible) {\n      /**\n       * Only scroll the active item into view and emit the value\n       * change, when the picker column is actively visible to the user.\n       */\n      const {\n        items,\n        value\n      } = this;\n      this.scrollActiveItemIntoView();\n      const findItem = items.find(item => item.value === value);\n\n      if (findItem) {\n        this.ionChange.emit(findItem);\n      }\n    }\n  }\n  /**\n   * Only setup scroll listeners\n   * when the picker is visible, otherwise\n   * the container will have a scroll\n   * height of 0px.\n   */\n\n\n  componentWillLoad() {\n    const visibleCallback = entries => {\n      var _a;\n\n      const ev = entries[0];\n\n      if (ev.isIntersecting) {\n        /**\n         * Because this initial call to scrollActiveItemIntoView has to fire before\n         * the scroll listener is set up, we need to manage the active class manually.\n         */\n        const oldActive = getElementRoot(this.el).querySelector(`.${PICKER_COL_ACTIVE}`);\n        oldActive === null || oldActive === void 0 ? void 0 : oldActive.classList.remove(PICKER_COL_ACTIVE);\n        this.scrollActiveItemIntoView();\n        (_a = this.activeItem) === null || _a === void 0 ? void 0 : _a.classList.add(PICKER_COL_ACTIVE);\n        this.initializeScrollListener();\n        this.isColumnVisible = true;\n      } else {\n        if (this.destroyScrollListener) {\n          this.destroyScrollListener();\n          this.destroyScrollListener = undefined;\n        }\n\n        this.isColumnVisible = false;\n      }\n    };\n\n    new IntersectionObserver(visibleCallback, {\n      threshold: 0.01\n    }).observe(this.el);\n    const parentEl = this.el.closest('ion-picker-internal');\n\n    if (parentEl !== null) {\n      parentEl.addEventListener('ionInputModeChange', ev => this.inputModeChange(ev));\n    }\n  }\n\n  scrollActiveItemIntoView() {\n    const activeEl = this.activeItem;\n\n    if (activeEl) {\n      this.centerPickerItemInView(activeEl, false);\n    }\n  }\n\n  get activeItem() {\n    return getElementRoot(this.el).querySelector(`.picker-item[data-value=\"${this.value}\"]`);\n  }\n\n  render() {\n    const {\n      items,\n      color,\n      isActive,\n      numericInput\n    } = this;\n    const mode = getIonMode(this);\n    return h(Host, {\n      tabindex: 0,\n      class: createColorClasses(color, {\n        [mode]: true,\n        ['picker-column-active']: isActive,\n        ['picker-column-numeric-input']: numericInput\n      })\n    }, h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"), h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"), h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"), items.map((item, index) => {\n      return h(\"div\", {\n        class: \"picker-item\",\n        \"data-value\": item.value,\n        \"data-index\": index,\n        onClick: ev => {\n          this.centerPickerItemInView(ev.target);\n        }\n      }, item.text);\n    }), h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"), h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"), h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"));\n  }\n\n  get el() {\n    return this;\n  }\n\n  static get watchers() {\n    return {\n      \"value\": [\"valueChange\"]\n    };\n  }\n\n  static get style() {\n    return {\n      ios: pickerColumnInternalIosCss,\n      md: pickerColumnInternalMdCss\n    };\n  }\n\n};\nconst PICKER_COL_ACTIVE = 'picker-item-active';\nPickerColumnInternal = /*@__PURE__*/proxyCustomElement(PickerColumnInternal, [33, \"ion-picker-column-internal\", {\n  \"items\": [16],\n  \"value\": [1032],\n  \"color\": [513],\n  \"numericInput\": [4, \"numeric-input\"],\n  \"isActive\": [32]\n}]);\n\nfunction defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n\n  const components = [\"ion-picker-column-internal\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-picker-column-internal\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, PickerColumnInternal);\n        }\n\n        break;\n    }\n  });\n}\n\nexport { PickerColumnInternal as P, defineCustomElement as d };","map":{"version":3,"sources":["/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@ionic/core/components/picker-column-internal.js"],"names":["HTMLElement","createEvent","h","Host","proxyCustomElement","b","getIonMode","r","raf","g","getElementRoot","a","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd","c","createColorClasses","pickerColumnInternalIosCss","pickerColumnInternalMdCss","PickerColumnInternal","constructor","__registerHost","__attachShadow","ionChange","hapticsStarted","isColumnVisible","isActive","items","color","numericInput","centerPickerItemInView","target","smooth","el","scroll","top","offsetTop","clientHeight","left","behavior","undefined","inputModeChange","ev","useInputMode","inputModeColumn","detail","isColumnActive","initializeScrollListener","timeout","activeEl","activeItem","scrollCallback","clearTimeout","bbox","getBoundingClientRect","centerX","x","width","centerY","y","height","activeElement","shadowRoot","elementFromPoint","classList","remove","PICKER_COL_ACTIVE","add","setTimeout","dataIndex","getAttribute","index","parseInt","selectedItem","value","addEventListener","destroyScrollListener","removeEventListener","valueChange","scrollActiveItemIntoView","findItem","find","item","emit","componentWillLoad","visibleCallback","entries","_a","isIntersecting","oldActive","querySelector","IntersectionObserver","threshold","observe","parentEl","closest","render","mode","tabindex","class","map","onClick","text","watchers","style","ios","md","defineCustomElement","customElements","components","forEach","tagName","get","define","P","d"],"mappings":"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","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, createEvent, h, Host, proxyCustomElement } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { r as raf, g as getElementRoot } from './helpers.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic.js';\nimport { c as createColorClasses } from './theme.js';\n\nconst pickerColumnInternalIosCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{height:34px;line-height:34px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty{scroll-snap-align:none}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\n\nconst pickerColumnInternalMdCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{height:34px;line-height:34px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty{scroll-snap-align:none}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}:host .picker-item-active{color:var(--ion-color-base)}\";\n\nlet PickerColumnInternal = class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.hapticsStarted = false;\n    this.isColumnVisible = false;\n    this.isActive = false;\n    /**\n     * A list of options to be displayed in the picker\n     */\n    this.items = [];\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n    this.color = 'primary';\n    /**\n     * If `true`, tapping the picker will\n     * reveal a number input keyboard that lets\n     * the user type in values for each picker\n     * column. This is useful when working\n     * with time pickers.\n     *\n     * @internal\n     */\n    this.numericInput = false;\n    this.centerPickerItemInView = (target, smooth = true) => {\n      this.el.scroll({\n        // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n        top: target.offsetTop - (3 * target.clientHeight) + (target.clientHeight / 2),\n        left: 0,\n        behavior: smooth ? 'smooth' : undefined\n      });\n    };\n    /**\n     * When ionInputModeChange is emitted, each column\n     * needs to check if it is the one being made available\n     * for text entry.\n     */\n    this.inputModeChange = (ev) => {\n      if (!this.numericInput) {\n        return;\n      }\n      const { useInputMode, inputModeColumn } = ev.detail;\n      /**\n       * If inputModeColumn is undefined then this means\n       * all numericInput columns are being selected.\n       */\n      const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\n      if (!useInputMode || !isColumnActive) {\n        this.isActive = false;\n        return;\n      }\n      this.isActive = true;\n    };\n    /**\n     * When the column scrolls, the component\n     * needs to determine which item is centered\n     * in the view and will emit an ionChange with\n     * the item object.\n     */\n    this.initializeScrollListener = () => {\n      const { el } = this;\n      let timeout;\n      let activeEl = this.activeItem;\n      const scrollCallback = () => {\n        raf(() => {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n          }\n          if (!this.hapticsStarted) {\n            hapticSelectionStart();\n            this.hapticsStarted = true;\n          }\n          /**\n           * Select item in the center of the column\n           * which is the month/year that we want to select\n           */\n          const bbox = el.getBoundingClientRect();\n          const centerX = bbox.x + (bbox.width / 2);\n          const centerY = bbox.y + (bbox.height / 2);\n          const activeElement = el.shadowRoot.elementFromPoint(centerX, centerY);\n          if (activeEl !== null) {\n            activeEl.classList.remove(PICKER_COL_ACTIVE);\n          }\n          /**\n           * If we are selecting a new value,\n           * we need to run haptics again.\n           */\n          if (activeElement !== activeEl) {\n            hapticSelectionChanged();\n          }\n          activeEl = activeElement;\n          activeElement.classList.add(PICKER_COL_ACTIVE);\n          timeout = setTimeout(() => {\n            const dataIndex = activeElement.getAttribute('data-index');\n            /**\n             * If no value it is\n             * possible we hit one of the\n             * empty padding columns.\n             */\n            if (dataIndex === null) {\n              return;\n            }\n            const index = parseInt(dataIndex, 10);\n            const selectedItem = this.items[index];\n            if (selectedItem.value !== this.value) {\n              this.value = selectedItem.value;\n              hapticSelectionEnd();\n              this.hapticsStarted = false;\n            }\n          }, 250);\n        });\n      };\n      /**\n       * Wrap this in an raf so that the scroll callback\n       * does not fire when component is initially shown.\n       */\n      raf(() => {\n        el.addEventListener('scroll', scrollCallback);\n        this.destroyScrollListener = () => {\n          el.removeEventListener('scroll', scrollCallback);\n        };\n      });\n    };\n  }\n  valueChange() {\n    if (this.isColumnVisible) {\n      /**\n       * Only scroll the active item into view and emit the value\n       * change, when the picker column is actively visible to the user.\n       */\n      const { items, value } = this;\n      this.scrollActiveItemIntoView();\n      const findItem = items.find(item => item.value === value);\n      if (findItem) {\n        this.ionChange.emit(findItem);\n      }\n    }\n  }\n  /**\n   * Only setup scroll listeners\n   * when the picker is visible, otherwise\n   * the container will have a scroll\n   * height of 0px.\n   */\n  componentWillLoad() {\n    const visibleCallback = (entries) => {\n      var _a;\n      const ev = entries[0];\n      if (ev.isIntersecting) {\n        /**\n         * Because this initial call to scrollActiveItemIntoView has to fire before\n         * the scroll listener is set up, we need to manage the active class manually.\n         */\n        const oldActive = getElementRoot(this.el).querySelector(`.${PICKER_COL_ACTIVE}`);\n        oldActive === null || oldActive === void 0 ? void 0 : oldActive.classList.remove(PICKER_COL_ACTIVE);\n        this.scrollActiveItemIntoView();\n        (_a = this.activeItem) === null || _a === void 0 ? void 0 : _a.classList.add(PICKER_COL_ACTIVE);\n        this.initializeScrollListener();\n        this.isColumnVisible = true;\n      }\n      else {\n        if (this.destroyScrollListener) {\n          this.destroyScrollListener();\n          this.destroyScrollListener = undefined;\n        }\n        this.isColumnVisible = false;\n      }\n    };\n    new IntersectionObserver(visibleCallback, { threshold: 0.01 }).observe(this.el);\n    const parentEl = this.el.closest('ion-picker-internal');\n    if (parentEl !== null) {\n      parentEl.addEventListener('ionInputModeChange', (ev) => this.inputModeChange(ev));\n    }\n  }\n  scrollActiveItemIntoView() {\n    const activeEl = this.activeItem;\n    if (activeEl) {\n      this.centerPickerItemInView(activeEl, false);\n    }\n  }\n  get activeItem() {\n    return getElementRoot(this.el).querySelector(`.picker-item[data-value=\"${this.value}\"]`);\n  }\n  render() {\n    const { items, color, isActive, numericInput } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { tabindex: 0, class: createColorClasses(color, {\n        [mode]: true,\n        ['picker-column-active']: isActive,\n        ['picker-column-numeric-input']: numericInput\n      }) }, h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), items.map((item, index) => {\n      return (h(\"div\", { class: \"picker-item\", \"data-value\": item.value, \"data-index\": index, onClick: (ev) => {\n          this.centerPickerItemInView(ev.target);\n        } }, item.text));\n    }), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\")));\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"value\": [\"valueChange\"]\n  }; }\n  static get style() { return {\n    ios: pickerColumnInternalIosCss,\n    md: pickerColumnInternalMdCss\n  }; }\n};\nconst PICKER_COL_ACTIVE = 'picker-item-active';\nPickerColumnInternal = /*@__PURE__*/ proxyCustomElement(PickerColumnInternal, [33, \"ion-picker-column-internal\", {\n    \"items\": [16],\n    \"value\": [1032],\n    \"color\": [513],\n    \"numericInput\": [4, \"numeric-input\"],\n    \"isActive\": [32]\n  }]);\nfunction defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-picker-column-internal\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-picker-column-internal\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, PickerColumnInternal);\n      }\n      break;\n  } });\n}\n\nexport { PickerColumnInternal as P, defineCustomElement as d };\n"]},"metadata":{},"sourceType":"module"}