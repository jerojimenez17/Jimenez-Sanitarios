{"ast":null,"code":"export const CartReducer = (state, action) => {\n  switch (action.type) {\n    case 'addItem':\n      return { ...state,\n        products: [...state.products, action.payload],\n        amount: state.amount + 1,\n        total: state.total + parseFloat(action.payload.price)\n      };\n\n    case 'removeItem':\n      return { ...state,\n        products: [...state.products.slice(0, action.payload), ...state.products.slice(action.payload + 1)],\n        amount: state.amount - 1,\n        total: state.total - parseFloat(state.products[action.payload].price)\n      };\n\n    case 'removeAll':\n      return { ...state,\n        products: [],\n        amount: 0,\n        total: 0\n      };\n\n    case 'updateAmount':\n      return { ...state,\n        products: state.products.map(product => {\n          if (product.id === Number(action.payload.id)) {\n            state.amount = state.amount + 1;\n            state.total = state.total + parseFloat(product.price);\n            return { ...product,\n              amount: product.amount + 1\n            };\n          }\n\n          return product;\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n_c = CartReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartReducer\");","map":{"version":3,"sources":["/home/jero/Documentos/IonicReactApp/cursoreact/src/context/CartReducer.ts"],"names":["CartReducer","state","action","type","products","payload","amount","total","parseFloat","price","slice","map","product","id","Number"],"mappings":"AAYA,OAAO,MAAMA,WAAW,GAAG,CAACC,KAAD,EAAmBC,MAAnB,KAA0C;AACjE,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,SAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B,CAFP;AAGHC,QAAAA,MAAM,EAAEL,KAAK,CAACK,MAAN,GAAe,CAHpB;AAIHC,QAAAA,KAAK,EAAEN,KAAK,CAACM,KAAN,GAAcC,UAAU,CAACN,MAAM,CAACG,OAAP,CAAeI,KAAhB;AAJ5B,OAAP;;AAMJ,SAAK,YAAL;AACI,aAAO,EACH,GAAGR,KADA;AAEHG,QAAAA,QAAQ,EAAC,CAAC,GAAGH,KAAK,CAACG,QAAN,CAAeM,KAAf,CAAqB,CAArB,EAAuBR,MAAM,CAACG,OAA9B,CAAJ,EAA4C,GAAGJ,KAAK,CAACG,QAAN,CAAeM,KAAf,CAAqBR,MAAM,CAACG,OAAP,GAAe,CAApC,CAA/C,CAFN;AAGHC,QAAAA,MAAM,EAAEL,KAAK,CAACK,MAAN,GAAe,CAHpB;AAIHC,QAAAA,KAAK,EAAEN,KAAK,CAACM,KAAN,GAAcC,UAAU,CAACP,KAAK,CAACG,QAAN,CAAeF,MAAM,CAACG,OAAtB,EAA+BI,KAAhC;AAJ5B,OAAP;;AAMJ,SAAK,WAAL;AACI,aAAO,EACH,GAAGR,KADA;AAEHG,QAAAA,QAAQ,EAAC,EAFN;AAGHE,QAAAA,MAAM,EAAE,CAHL;AAIHC,QAAAA,KAAK,EAAE;AAJJ,OAAP;;AAMJ,SAAK,cAAL;AACI,aAAO,EACH,GAAGN,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeO,GAAf,CAAmBC,OAAO,IAAI;AACpC,cAAGA,OAAO,CAACC,EAAR,KAAeC,MAAM,CAAEZ,MAAM,CAACG,OAAP,CAAeQ,EAAjB,CAAxB,EAA6C;AACzCZ,YAAAA,KAAK,CAACK,MAAN,GAAeL,KAAK,CAACK,MAAN,GAAe,CAA9B;AACAL,YAAAA,KAAK,CAACM,KAAN,GAAcN,KAAK,CAACM,KAAN,GAAcC,UAAU,CAACI,OAAO,CAACH,KAAT,CAAtC;AACA,mBAAO,EACH,GAAGG,OADA;AAEHN,cAAAA,MAAM,EAAEM,OAAO,CAACN,MAAR,GAAiB;AAFtB,aAAP;AAIH;;AACD,iBAAOM,OAAP;AACH,SAVS;AAFP,OAAP;;AAeJ;AACI,aAAOX,KAAP;AAvCR;AA0CH,CA3CM;KAAMD,W","sourcesContent":["import CartState from \"../interfaces/CartState\";\nimport Product from \"../interfaces/Product\";\nimport ProductCart from \"../interfaces/ProductCart\";\n\ntype CartAction = \n   | {type:'addItem', payload: Product}\n   | {type:'removeItem', payload: number}\n    | {type:'removeAll', payload: Product}\n    | {type:'updateAmount', payload: {id:string}}\n    | {type:'updateTotal', payload: ProductCart};\n\n\nexport const CartReducer = (state: CartState, action: CartAction) => {\n    switch(action.type){\n        case 'addItem':\n            return {\n                ...state,\n                products: [...state.products, action.payload],\n                amount: state.amount + 1,\n                total: state.total + parseFloat(action.payload.price)\n            }\n        case 'removeItem':\n            return {\n                ...state,\n                products:[...state.products.slice(0,action.payload), ...state.products.slice(action.payload+1)],\n                amount: state.amount - 1,\n                total: state.total - parseFloat(state.products[action.payload].price)\n            }\n        case 'removeAll':\n            return {\n                ...state,\n                products:[],  \n                amount: 0,\n                total: 0  \n            }\n        case 'updateAmount':\n            return {\n                ...state,\n                products: state.products.map(product => {\n                    if(product.id === Number( action.payload.id)){\n                        state.amount = state.amount + 1;\n                        state.total = state.total + parseFloat(product.price);\n                        return {\n                            ...product,\n                            amount: product.amount + 1\n                        }\n                    }\n                    return product;\n                }),    \n            }\n\n        default:\n            return state;\n\n    }\n}"]},"metadata":{},"sourceType":"module"}