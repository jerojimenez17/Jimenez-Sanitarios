{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, createEvent, h, Host, proxyCustomElement } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nlet RadioGroup = class extends HTMLElement {\n  constructor() {\n    super();\n\n    this.__registerHost();\n\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.inputId = `ion-rg-${radioGroupIds++}`;\n    this.labelId = `${this.inputId}-lbl`;\n    /**\n     * If `true`, the radios can be deselected.\n     */\n\n    this.allowEmptySelection = false;\n    /**\n     * The name of the control, which is submitted with the form data.\n     */\n\n    this.name = this.inputId;\n\n    this.setRadioTabindex = value => {\n      const radios = this.getRadios(); // Get the first radio that is not disabled and the checked one\n\n      const first = radios.find(radio => !radio.disabled);\n      const checked = radios.find(radio => radio.value === value && !radio.disabled);\n\n      if (!first && !checked) {\n        return;\n      } // If an enabled checked radio exists, set it to be the focusable radio\n      // otherwise we default to focus the first radio\n\n\n      const focusable = checked || first;\n\n      for (const radio of radios) {\n        const tabindex = radio === focusable ? 0 : -1;\n        radio.setButtonTabindex(tabindex);\n      }\n    };\n\n    this.onClick = ev => {\n      ev.preventDefault();\n      const selectedRadio = ev.target && ev.target.closest('ion-radio');\n\n      if (selectedRadio) {\n        const currentValue = this.value;\n        const newValue = selectedRadio.value;\n\n        if (newValue !== currentValue) {\n          this.value = newValue;\n        } else if (this.allowEmptySelection) {\n          this.value = undefined;\n        }\n      }\n    };\n  }\n\n  valueChanged(value) {\n    this.setRadioTabindex(value);\n    this.ionChange.emit({\n      value\n    });\n  }\n\n  componentDidLoad() {\n    this.setRadioTabindex(this.value);\n  }\n\n  async connectedCallback() {\n    // Get the list header if it exists and set the id\n    // this is used to set aria-labelledby\n    const header = this.el.querySelector('ion-list-header') || this.el.querySelector('ion-item-divider');\n\n    if (header) {\n      const label = this.label = header.querySelector('ion-label');\n\n      if (label) {\n        this.labelId = label.id = this.name + '-lbl';\n      }\n    }\n  }\n\n  getRadios() {\n    return Array.from(this.el.querySelectorAll('ion-radio'));\n  }\n\n  onKeydown(ev) {\n    const inSelectPopover = !!this.el.closest('ion-select-popover');\n\n    if (ev.target && !this.el.contains(ev.target)) {\n      return;\n    } // Get all radios inside of the radio group and then\n    // filter out disabled radios since we need to skip those\n\n\n    const radios = this.getRadios().filter(radio => !radio.disabled); // Only move the radio if the current focus is in the radio group\n\n    if (ev.target && radios.includes(ev.target)) {\n      const index = radios.findIndex(radio => radio === ev.target);\n      const current = radios[index];\n      let next; // If hitting arrow down or arrow right, move to the next radio\n      // If we're on the last radio, move to the first radio\n\n      if (['ArrowDown', 'ArrowRight'].includes(ev.code)) {\n        next = index === radios.length - 1 ? radios[0] : radios[index + 1];\n      } // If hitting arrow up or arrow left, move to the previous radio\n      // If we're on the first radio, move to the last radio\n\n\n      if (['ArrowUp', 'ArrowLeft'].includes(ev.code)) {\n        next = index === 0 ? radios[radios.length - 1] : radios[index - 1];\n      }\n\n      if (next && radios.includes(next)) {\n        next.setFocus(ev);\n\n        if (!inSelectPopover) {\n          this.value = next.value;\n        }\n      } // Update the radio group value when a user presses the\n      // space bar on top of a selected radio\n\n\n      if (['Space'].includes(ev.code)) {\n        this.value = this.allowEmptySelection && this.value !== undefined ? undefined : current.value; // Prevent browsers from jumping\n        // to the bottom of the screen\n\n        ev.preventDefault();\n      }\n    }\n  }\n\n  render() {\n    const {\n      label,\n      labelId\n    } = this;\n    const mode = getIonMode(this);\n    return h(Host, {\n      role: \"radiogroup\",\n      \"aria-labelledby\": label ? labelId : null,\n      onClick: this.onClick,\n      class: mode\n    });\n  }\n\n  get el() {\n    return this;\n  }\n\n  static get watchers() {\n    return {\n      \"value\": [\"valueChanged\"]\n    };\n  }\n\n};\nlet radioGroupIds = 0;\nRadioGroup = /*@__PURE__*/proxyCustomElement(RadioGroup, [0, \"ion-radio-group\", {\n  \"allowEmptySelection\": [4, \"allow-empty-selection\"],\n  \"name\": [1],\n  \"value\": [1032]\n}, [[4, \"keydown\", \"onKeydown\"]]]);\n\nfunction defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n\n  const components = [\"ion-radio-group\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-radio-group\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, RadioGroup);\n        }\n\n        break;\n    }\n  });\n}\n\nexport { RadioGroup as R, defineCustomElement as d };","map":{"version":3,"sources":["/home/jero/Documentos/IonicReactApp/cursoreact/node_modules/@ionic/core/components/radio-group.js"],"names":["HTMLElement","createEvent","h","Host","proxyCustomElement","b","getIonMode","RadioGroup","constructor","__registerHost","ionChange","inputId","radioGroupIds","labelId","allowEmptySelection","name","setRadioTabindex","value","radios","getRadios","first","find","radio","disabled","checked","focusable","tabindex","setButtonTabindex","onClick","ev","preventDefault","selectedRadio","target","closest","currentValue","newValue","undefined","valueChanged","emit","componentDidLoad","connectedCallback","header","el","querySelector","label","id","Array","from","querySelectorAll","onKeydown","inSelectPopover","contains","filter","includes","index","findIndex","current","next","code","length","setFocus","render","mode","role","class","watchers","defineCustomElement","customElements","components","forEach","tagName","get","define","R","d"],"mappings":"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","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { HTMLElement, createEvent, h, Host, proxyCustomElement } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\n\nlet RadioGroup = class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.inputId = `ion-rg-${radioGroupIds++}`;\n    this.labelId = `${this.inputId}-lbl`;\n    /**\n     * If `true`, the radios can be deselected.\n     */\n    this.allowEmptySelection = false;\n    /**\n     * The name of the control, which is submitted with the form data.\n     */\n    this.name = this.inputId;\n    this.setRadioTabindex = (value) => {\n      const radios = this.getRadios();\n      // Get the first radio that is not disabled and the checked one\n      const first = radios.find(radio => !radio.disabled);\n      const checked = radios.find(radio => (radio.value === value && !radio.disabled));\n      if (!first && !checked) {\n        return;\n      }\n      // If an enabled checked radio exists, set it to be the focusable radio\n      // otherwise we default to focus the first radio\n      const focusable = checked || first;\n      for (const radio of radios) {\n        const tabindex = radio === focusable ? 0 : -1;\n        radio.setButtonTabindex(tabindex);\n      }\n    };\n    this.onClick = (ev) => {\n      ev.preventDefault();\n      const selectedRadio = ev.target && ev.target.closest('ion-radio');\n      if (selectedRadio) {\n        const currentValue = this.value;\n        const newValue = selectedRadio.value;\n        if (newValue !== currentValue) {\n          this.value = newValue;\n        }\n        else if (this.allowEmptySelection) {\n          this.value = undefined;\n        }\n      }\n    };\n  }\n  valueChanged(value) {\n    this.setRadioTabindex(value);\n    this.ionChange.emit({ value });\n  }\n  componentDidLoad() {\n    this.setRadioTabindex(this.value);\n  }\n  async connectedCallback() {\n    // Get the list header if it exists and set the id\n    // this is used to set aria-labelledby\n    const header = this.el.querySelector('ion-list-header') || this.el.querySelector('ion-item-divider');\n    if (header) {\n      const label = this.label = header.querySelector('ion-label');\n      if (label) {\n        this.labelId = label.id = this.name + '-lbl';\n      }\n    }\n  }\n  getRadios() {\n    return Array.from(this.el.querySelectorAll('ion-radio'));\n  }\n  onKeydown(ev) {\n    const inSelectPopover = !!this.el.closest('ion-select-popover');\n    if (ev.target && !this.el.contains(ev.target)) {\n      return;\n    }\n    // Get all radios inside of the radio group and then\n    // filter out disabled radios since we need to skip those\n    const radios = this.getRadios().filter(radio => !radio.disabled);\n    // Only move the radio if the current focus is in the radio group\n    if (ev.target && radios.includes(ev.target)) {\n      const index = radios.findIndex(radio => radio === ev.target);\n      const current = radios[index];\n      let next;\n      // If hitting arrow down or arrow right, move to the next radio\n      // If we're on the last radio, move to the first radio\n      if (['ArrowDown', 'ArrowRight'].includes(ev.code)) {\n        next = (index === radios.length - 1)\n          ? radios[0]\n          : radios[index + 1];\n      }\n      // If hitting arrow up or arrow left, move to the previous radio\n      // If we're on the first radio, move to the last radio\n      if (['ArrowUp', 'ArrowLeft'].includes(ev.code)) {\n        next = (index === 0)\n          ? radios[radios.length - 1]\n          : radios[index - 1];\n      }\n      if (next && radios.includes(next)) {\n        next.setFocus(ev);\n        if (!inSelectPopover) {\n          this.value = next.value;\n        }\n      }\n      // Update the radio group value when a user presses the\n      // space bar on top of a selected radio\n      if (['Space'].includes(ev.code)) {\n        this.value = (this.allowEmptySelection && this.value !== undefined)\n          ? undefined\n          : current.value;\n        // Prevent browsers from jumping\n        // to the bottom of the screen\n        ev.preventDefault();\n      }\n    }\n  }\n  render() {\n    const { label, labelId } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { role: \"radiogroup\", \"aria-labelledby\": label ? labelId : null, onClick: this.onClick, class: mode }));\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"value\": [\"valueChanged\"]\n  }; }\n};\nlet radioGroupIds = 0;\nRadioGroup = /*@__PURE__*/ proxyCustomElement(RadioGroup, [0, \"ion-radio-group\", {\n    \"allowEmptySelection\": [4, \"allow-empty-selection\"],\n    \"name\": [1],\n    \"value\": [1032]\n  }, [[4, \"keydown\", \"onKeydown\"]]]);\nfunction defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-radio-group\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-radio-group\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, RadioGroup);\n      }\n      break;\n  } });\n}\n\nexport { RadioGroup as R, defineCustomElement as d };\n"]},"metadata":{},"sourceType":"module"}